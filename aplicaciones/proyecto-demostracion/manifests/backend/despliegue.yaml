apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-backend
  namespace: demo-project
  labels:
    app: demo-backend
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-backend
  template:
    metadata:
      labels:
        app: demo-backend
        tier: backend
    spec:
      containers:
      - name: backend
        image: node:18-alpine
        ports:
        - containerPort: 3000
          name: http
        command: ["node", "-e"]
        args:
        - |
          const http = require('http');
          const url = require('url');
          
          const server = http.createServer((req, res) => {
            const parsedUrl = url.parse(req.url, true);
            const path = parsedUrl.pathname;
            
            // CORS headers
            res.setHeader('Access-Control-Allow-Origin', '*');
            res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
            res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
            res.setHeader('Content-Type', 'application/json');
            
            console.log(`${new Date().toISOString()} - ${req.method} ${path}`);
            
            // Handle preflight requests
            if (req.method === 'OPTIONS') {
              res.writeHead(200);
              res.end();
              return;
            }
            
            // API Routes
            if (path === '/health' || path === '/') {
              res.writeHead(200);
              res.end(JSON.stringify({
                status: 'healthy',
                service: 'demo-backend',
                timestamp: new Date().toISOString(),
                version: '1.0.0',
                environment: 'development',
                database: {
                  status: 'connected',
                  type: 'redis',
                  host: 'demo-database'
                }
              }));
            } else if (path === '/api/status') {
              res.writeHead(200);
              res.end(JSON.stringify({
                frontend: 'running',
                backend: 'running',
                database: 'running',
                overall: 'healthy'
              }));
            } else if (path === '/api/info') {
              res.writeHead(200);
              res.end(JSON.stringify({
                application: 'GitOps Demo',
                architecture: '3-tier',
                technologies: {
                  frontend: 'NGINX + JavaScript',
                  backend: 'Node.js',
                  database: 'Redis',
                  orchestration: 'Kubernetes',
                  gitops: 'ArgoCD'
                },
                endpoints: [
                  '/health',
                  '/api/status', 
                  '/api/info',
                  '/api/test'
                ]
              }));
            } else if (path === '/api/test') {
              res.writeHead(200);
              res.end(JSON.stringify({
                message: 'API test successful!',
                backend_response_time: Math.random() * 100 + 'ms',
                request_id: Math.random().toString(36).substr(2, 9),
                timestamp: new Date().toISOString()
              }));
            } else {
              res.writeHead(404);
              res.end(JSON.stringify({
                error: 'Not found',
                path: path,
                available_endpoints: ['/health', '/api/status', '/api/info', '/api/test']
              }));
            }
          });
          
          const PORT = 3000;
          server.listen(PORT, '0.0.0.0', () => {
            console.log(`Demo Backend running on port ${PORT}`);
            console.log('Available endpoints:');
            console.log('  GET /health - Health check');
            console.log('  GET /api/status - System status');
            console.log('  GET /api/info - Application info');
            console.log('  GET /api/test - API test');
          });
        env:
        - name: NODE_ENV
          value: "development"
        - name: LOG_LEVEL
          value: "info"
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: demo-backend
  namespace: demo-project
  labels:
    app: demo-backend
    tier: backend
spec:
  selector:
    app: demo-backend
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  type: ClusterIP
