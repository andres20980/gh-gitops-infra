apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: demo-project-multicluster
  namespace: argocd
spec:
  generators:
    # Generator basado en clusters - Deploy automático en todos los clusters registrados
    - clusters:
        selector:
          matchLabels:
            environment: "gitops"  # Solo clusters con esta etiqueta
        values:
          # Variables disponibles para templates
          revision: HEAD
          path: "manifiestos/demo-project"
    
    # Matrix generator - Combinar clusters con diferentes componentes
    - matrix:
        generators:
          # Lista de clusters
          - clusters:
              selector:
                matchLabels:
                  environment: "gitops"
          # Lista de componentes del demo-project
          - list:
              elements:
                - component: frontend
                  namespace: demo-frontend
                  path: manifiestos/demo-project/frontend
                  port: "3000"
                - component: backend
                  namespace: demo-backend  
                  path: manifiestos/demo-project/backend
                  port: "8080"
                - component: database
                  namespace: demo-database
                  path: manifiestos/demo-project/database
                  port: "5432"
  
  template:
    metadata:
      # Nombrado dinámico basado en cluster y componente
      name: 'demo-{{.values.component}}-{{.name}}'
      labels:
        app.kubernetes.io/name: 'demo-{{.values.component}}'
        app.kubernetes.io/instance: '{{.name}}'
        environment: '{{.metadata.labels.environment}}'
        cluster: '{{.name}}'
        component: '{{.values.component}}'
      annotations:
        argocd.argoproj.io/sync-wave: "{{.values.syncWave | default 0}}"
        notifications.argoproj.io/subscribe.on-sync-succeeded.slack: gitops-notifications
    
    spec:
      project: default
      
      source:
        repoURL: https://github.com/andres20980/gh-gitops-infra.git
        targetRevision: '{{.values.revision}}'
        path: '{{.values.path}}'
        
        # Helm values dinámicos por cluster y componente
        helm:
          valueFiles:
            - values.yaml
            - 'values-{{.name}}.yaml'  # values específicos por cluster
          parameters:
            - name: image.tag
              value: '{{.metadata.labels.imageTag | default "latest"}}'
            - name: service.port
              value: '{{.values.port}}'
            - name: ingress.host
              value: 'demo-{{.values.component}}-{{.name}}.local'
            - name: environment
              value: '{{.metadata.labels.environment}}'
            - name: cluster
              value: '{{.name}}'
      
      destination:
        server: '{{.server}}'
        namespace: '{{.values.namespace}}'
      
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
          allowEmpty: false
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
          - ApplyOutOfSyncOnly=true
        retry:
          limit: 5
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 3m
      
      # Health checks específicos por componente
      ignoreDifferences:
        - group: apps
          kind: Deployment
          jsonPointers:
            - /spec/replicas
        - group: ""
          kind: Service
          jsonPointers:
            - /spec/clusterIP
      
      # Políticas de salud personalizadas
      revisionHistoryLimit: 5
