apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications
    app.kubernetes.io/part-of: argocd
data:
  # Configuraci√≥n de servicios de notificaci√≥n
  service.webhook.grafana: |
    url: http://prometheus-stack-grafana.monitoring.svc.cluster.local:80/api/annotations
    headers:
      - name: Content-Type
        value: application/json
  
  service.webhook.generic: |
    url: http://localhost:8089/webhook  # Argo Events webhook
    headers:
      - name: Content-Type
        value: application/json
      - name: X-Source
        value: argocd-notifications
  
  # Templates de notificaci√≥n
  template.app-deployed: |
    webhook:
      grafana:
        method: POST
        body: |
          {
            "text": "üöÄ Application {{.app.metadata.name}} deployed successfully in {{.context.environment | default "development"}}",
            "tags": ["gitops", "deployment", "success", "{{.app.metadata.name}}"],
            "time": "{{.app.status.operationState.finishedAt}}",
            "timeEnd": "{{.app.status.operationState.finishedAt}}"
          }
      generic:
        method: POST
        body: |
          {
            "event": "app-deployed",
            "application": "{{.app.metadata.name}}",
            "namespace": "{{.app.spec.destination.namespace}}",
            "cluster": "{{.app.spec.destination.name | default .app.spec.destination.server}}",
            "revision": "{{.app.status.sync.revision}}",
            "timestamp": "{{.app.status.operationState.finishedAt}}",
            "health": "{{.app.status.health.status}}",
            "sync": "{{.app.status.sync.status}}"
          }
  
  template.app-sync-failed: |
    webhook:
      grafana:
        method: POST
        body: |
          {
            "text": "‚ùå Application {{.app.metadata.name}} sync failed: {{.app.status.operationState.message}}",
            "tags": ["gitops", "deployment", "failure", "{{.app.metadata.name}}"],
            "time": "{{.app.status.operationState.finishedAt}}",
            "timeEnd": "{{.app.status.operationState.finishedAt}}"
          }
      generic:
        method: POST
        body: |
          {
            "event": "app-sync-failed",
            "application": "{{.app.metadata.name}}",
            "namespace": "{{.app.spec.destination.namespace}}",
            "cluster": "{{.app.spec.destination.name | default .app.spec.destination.server}}",
            "error": "{{.app.status.operationState.message}}",
            "timestamp": "{{.app.status.operationState.finishedAt}}"
          }
  
  template.app-health-degraded: |
    webhook:
      grafana:
        method: POST
        body: |
          {
            "text": "‚ö†Ô∏è Application {{.app.metadata.name}} health degraded: {{.app.status.health.message}}",
            "tags": ["gitops", "health", "warning", "{{.app.metadata.name}}"],
            "time": "{{.createdAt}}",
            "timeEnd": "{{.createdAt}}"
          }
      generic:
        method: POST
        body: |
          {
            "event": "app-health-degraded",
            "application": "{{.app.metadata.name}}",
            "namespace": "{{.app.spec.destination.namespace}}",
            "cluster": "{{.app.spec.destination.name | default .app.spec.destination.server}}",
            "health": "{{.app.status.health.status}}",
            "message": "{{.app.status.health.message}}",
            "timestamp": "{{.createdAt}}"
          }
  
  template.kargo-promotion: |
    webhook:
      generic:
        method: POST
        body: |
          {
            "event": "kargo-promotion-ready",
            "application": "{{.app.metadata.name}}",
            "namespace": "{{.app.spec.destination.namespace}}",
            "cluster": "{{.app.spec.destination.name | default .app.spec.destination.server}}",
            "revision": "{{.app.status.sync.revision}}",
            "timestamp": "{{.app.status.operationState.finishedAt}}",
            "environment": "{{.app.metadata.labels.environment | default 'dev'}}"
          }
  
  # Triggers para diferentes eventos
  trigger.on-deployed: |
    - description: Application is synced and healthy
      oncePer: app.status.sync.revision
      send:
      - app-deployed
      when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
  
  trigger.on-sync-failed: |
    - description: Application sync is failed
      oncePer: app.status.sync.revision
      send:
      - app-sync-failed
      when: app.status.operationState.phase in ['Error', 'Failed']
  
  trigger.on-health-degraded: |
    - description: Application has degraded
      send:
      - app-health-degraded
      when: app.status.health.status == 'Degraded'
  
  trigger.on-ready-for-promotion: |
    - description: Application is ready for Kargo promotion
      oncePer: app.status.sync.revision
      send:
      - kargo-promotion
      when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy' and app.metadata.labels.environment == 'dev'

  # Configuraci√≥n de subscripciones por defecto
  subscriptions: |
    # Global subscriptions para todas las apps
    - recipients:
      - grafana
      - generic
      triggers:
      - on-deployed
      - on-sync-failed
      - on-health-degraded
    
    # Subscripciones espec√≠ficas para apps de demo-project
    - recipients:
      - generic
      triggers:
      - on-ready-for-promotion
      selector: app.metadata.labels['app.kubernetes.io/name'] == 'demo-frontend' or app.metadata.labels['app.kubernetes.io/name'] == 'demo-backend'

---
apiVersion: v1
kind: Secret
metadata:
  name: argocd-notifications-secret
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications
    app.kubernetes.io/part-of: argocd
type: Opaque
data: {} # Add webhook tokens/secrets if needed

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd-notifications
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  project: default
  source:
    repoURL: https://argoproj.github.io/argo-helm
    chart: argocd-notifications
    targetRevision: 1.8.1
    helm:
      parameters:
        # Controller configuration
        - name: replicaCount
          value: "1"
        
        # Resource limits
        - name: resources.requests.cpu
          value: "50m"
        - name: resources.requests.memory
          value: "64Mi"  
        - name: resources.limits.cpu
          value: "100m"
        - name: resources.limits.memory
          value: "128Mi"
        
        # Metrics
        - name: metrics.enabled
          value: "true"
        - name: metrics.serviceMonitor.enabled
          value: "true"
        
      values: |
        # Global settings
        global:
          image:
            tag: "v1.2.1"
        
        # Controller specific configuration
        image:
          repository: argoprojlabs/argocd-notifications
          tag: v1.2.1
          pullPolicy: IfNotPresent
        
        # Security context
        podSecurityContext:
          runAsNonRoot: true
          runAsUser: 1000
          fsGroup: 1000
        
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        
        # Service configuration  
        service:
          type: ClusterIP
          port: 9001
        
        # ServiceMonitor for Prometheus
        serviceMonitor:
          enabled: true
          namespace: argocd
          additionalLabels:
            release: prometheus-stack
        
        # RBAC
        serviceAccount:
          create: true
          name: argocd-notifications-controller
          annotations:
            argocd.argoproj.io/sync-wave: "1"
        
        # Extra environment variables
        extraEnv:
          - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGLEVEL
            value: "info"
          - name: ARGOCD_NOTIFICATIONS_CONTROLLER_CONFIGMAP_NAME
            value: "argocd-notifications-cm"
        
        # Configuration references
        cm:
          create: false  # We're creating our own ConfigMap above
        
        secret:
          create: false  # We're creating our own Secret above
  
  destination:
    server: https://kubernetes.default.svc
    namespace: argocd
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  revisionHistoryLimit: 3
