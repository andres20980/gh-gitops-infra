# 游꿕 Ejemplo de Canary Deployment con Argo Rollouts

apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: demo-canary-rollout
  namespace: demo-project
spec:
  replicas: 10
  strategy:
    canary:
      # Configuraci칩n del an치lisis canary
      analysis:
        templates:
        - templateName: success-rate-analysis
        startingStep: 2
        args:
        - name: service-name
          value: demo-backend-canary
      
      # Configuraci칩n de pasos del canary
      steps:
      - setWeight: 10    # 10% del tr치fico al canary
      - pause:
          duration: 30s   # Pausa de 30 segundos
      
      - setWeight: 20    # Incrementar a 20%
      - pause:
          duration: 60s   # Pausa de 1 minuto para an치lisis
      
      - analysis:        # Ejecutar an치lisis autom치tico
          templates:
          - templateName: success-rate-analysis
          args:
          - name: service-name
            value: demo-backend-canary
      
      - setWeight: 50    # Si an치lisis pasa, incrementar a 50%
      - pause:
          duration: 120s  # Pausa de 2 minutos
      
      - setWeight: 80    # Incrementar a 80%
      - pause:
          duration: 60s
      
      # Finalizar con 100% si todo va bien
      
      # Configuraci칩n de tr치fico
      trafficRouting:
        nginx:
          stableIngress: demo-backend-stable
          additionalIngressAnnotations:
            canary-by-header: X-Canary
            canary-by-header-value: "true"
      
      # Anti-affinity para distribuci칩n de pods
      antiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution: {}
        preferredDuringSchedulingIgnoredDuringExecution:
          weight: 1
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app: demo-backend
            topologyKey: kubernetes.io/hostname

  # Especificaci칩n del pod template
  selector:
    matchLabels:
      app: demo-backend
  template:
    metadata:
      labels:
        app: demo-backend
    spec:
      containers:
      - name: demo-backend
        image: nginx:1.25.0
        ports:
        - containerPort: 80
        
        # Health checks para el rollout
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        
        # Resource limits
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        
        # Environment variables
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: VERSION
          value: "canary"

---
# An치lisis de m칠tricas para el canary
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate-analysis
  namespace: demo-project
spec:
  args:
  - name: service-name
  
  metrics:
  # An치lisis de success rate
  - name: success-rate
    provider:
      prometheus:
        address: http://prometheus-stack-kube-prom-prometheus.monitoring.svc.cluster.local:9090
        query: |
          sum(irate(
            nginx_ingress_controller_requests{
              ingress="{{args.service-name}}",
              status!~"[4-5].*"
            }[5m]
          )) / 
          sum(irate(
            nginx_ingress_controller_requests{
              ingress="{{args.service-name}}"
            }[5m]
          ))
    successCondition: result[0] >= 0.95  # 95% success rate m칤nimo
    interval: 30s
    count: 5
    failureLimit: 3

  # An치lisis de latencia promedio
  - name: avg-response-time
    provider:
      prometheus:
        address: http://prometheus-stack-kube-prom-prometheus.monitoring.svc.cluster.local:9090
        query: |
          avg(
            nginx_ingress_controller_request_duration_seconds_sum{
              ingress="{{args.service-name}}"
            } / 
            nginx_ingress_controller_request_duration_seconds_count{
              ingress="{{args.service-name}}"
            }
          )
    successCondition: result[0] <= 0.5  # M치ximo 500ms promedio
    interval: 30s
    count: 5
    failureLimit: 3

  # An치lisis de errores 5xx
  - name: error-rate-5xx
    provider:
      prometheus:
        address: http://prometheus-stack-kube-prom-prometheus.monitoring.svc.cluster.local:9090
        query: |
          sum(irate(
            nginx_ingress_controller_requests{
              ingress="{{args.service-name}}",
              status=~"5.*"
            }[5m]
          )) / 
          sum(irate(
            nginx_ingress_controller_requests{
              ingress="{{args.service-name}}"
            }[5m]
          ))
    successCondition: result[0] <= 0.01  # M치ximo 1% de errores 5xx
    interval: 30s
    count: 5
    failureLimit: 2

---
# Servicio para el canary deployment
apiVersion: v1
kind: Service
metadata:
  name: demo-backend-canary
  namespace: demo-project
spec:
  selector:
    app: demo-backend
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP

---
# Ingress para el canary
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: demo-backend-canary
  namespace: demo-project
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "0"
spec:
  rules:
  - host: demo-backend.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: demo-backend-canary
            port:
              number: 80

---
# Ingress estable para comparaci칩n
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: demo-backend-stable
  namespace: demo-project
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: demo-backend.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: demo-backend
            port:
              number: 80

---
# ServiceMonitor para m칠tricas de Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: demo-backend-canary-metrics
  namespace: demo-project
  labels:
    app: demo-backend
    release: prometheus-stack
spec:
  selector:
    matchLabels:
      app: demo-backend
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
