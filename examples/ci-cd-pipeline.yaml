# 🔄 Ejemplo de Pipeline CI/CD Completo con Argo Workflows

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: enterprise-ci-cd-pipeline
  namespace: argo-workflows
spec:
  entrypoint: ci-cd-pipeline
  arguments:
    parameters:
    - name: repo-url
      value: "http://192.168.34.196:3000/andres20980/gitops-infra.git"
    - name: image-tag
      value: "latest"
    - name: target-env
      value: "dev"
  
  templates:
  - name: ci-cd-pipeline
    dag:
      tasks:
      - name: checkout-source
        template: git-checkout
        arguments:
          parameters:
          - name: repo-url
            value: "{{workflow.parameters.repo-url}}"
      
      - name: run-tests
        template: run-unit-tests
        dependencies: [checkout-source]
      
      - name: security-scan
        template: security-scanning
        dependencies: [checkout-source]
      
      - name: build-images
        template: build-container-images
        dependencies: [run-tests, security-scan]
        arguments:
          parameters:
          - name: image-tag
            value: "{{workflow.parameters.image-tag}}"
      
      - name: integration-tests
        template: integration-testing
        dependencies: [build-images]
      
      - name: deploy-to-staging
        template: deploy-application
        dependencies: [integration-tests]
        arguments:
          parameters:
          - name: environment
            value: "staging"
          - name: image-tag
            value: "{{workflow.parameters.image-tag}}"
      
      - name: e2e-tests
        template: e2e-testing
        dependencies: [deploy-to-staging]
      
      - name: promote-to-production
        template: kargo-promotion
        dependencies: [e2e-tests]
        when: "{{workflow.parameters.target-env}} == 'prod'"

  # Template definitions
  - name: git-checkout
    inputs:
      parameters:
      - name: repo-url
    container:
      image: alpine/git:latest
      command: [sh, -c]
      args:
      - |
        git clone {{inputs.parameters.repo-url}} /workspace/source
        cd /workspace/source
        echo "Source checked out successfully"
      volumeMounts:
      - name: workspace
        mountPath: /workspace

  - name: run-unit-tests
    container:
      image: node:18-alpine
      command: [sh, -c]
      args:
      - |
        echo "🧪 Running unit tests..."
        cd /workspace/source
        # Simular tests unitarios
        echo "✅ Unit tests passed"
      volumeMounts:
      - name: workspace
        mountPath: /workspace

  - name: security-scanning
    container:
      image: aquasec/trivy:latest
      command: [sh, -c]
      args:
      - |
        echo "🔒 Running security scan..."
        cd /workspace/source
        # Simular escaneo de seguridad
        echo "✅ Security scan completed - no vulnerabilities found"
      volumeMounts:
      - name: workspace
        mountPath: /workspace

  - name: build-container-images
    inputs:
      parameters:
      - name: image-tag
    container:
      image: docker:latest
      command: [sh, -c]
      args:
      - |
        echo "🏗️ Building container images..."
        echo "Image tag: {{inputs.parameters.image-tag}}"
        # Simular build de imágenes
        echo "✅ Container images built successfully"
      volumeMounts:
      - name: docker-sock
        mountPath: /var/run/docker.sock

  - name: integration-testing
    container:
      image: postman/newman:latest
      command: [sh, -c]
      args:
      - |
        echo "🔗 Running integration tests..."
        # Simular tests de integración
        echo "✅ Integration tests passed"

  - name: deploy-application
    inputs:
      parameters:
      - name: environment
      - name: image-tag
    container:
      image: argoproj/argocd:latest
      command: [sh, -c]
      args:
      - |
        echo "🚀 Deploying to {{inputs.parameters.environment}}..."
        echo "Using image tag: {{inputs.parameters.image-tag}}"
        # Simular deployment
        echo "✅ Deployment to {{inputs.parameters.environment}} completed"

  - name: e2e-testing
    container:
      image: cypress/included:latest
      command: [sh, -c]
      args:
      - |
        echo "🎭 Running end-to-end tests..."
        # Simular tests E2E
        echo "✅ E2E tests passed"

  - name: kargo-promotion
    container:
      image: ghcr.io/akuity/kargo:latest
      command: [sh, -c]
      args:
      - |
        echo "📈 Promoting to production via Kargo..."
        # Simular promoción con Kargo
        echo "✅ Production promotion initiated"

  volumes:
  - name: workspace
    emptyDir: {}
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
      type: Socket

---
# Workflow Template para reutilización
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: enterprise-deployment-template
  namespace: argo-workflows
spec:
  entrypoint: deploy-with-rollback
  arguments:
    parameters:
    - name: app-name
    - name: environment
    - name: image-tag
    - name: rollback-enabled
      value: "true"

  templates:
  - name: deploy-with-rollback
    steps:
    - - name: backup-current
        template: backup-deployment
        arguments:
          parameters:
          - name: app-name
            value: "{{workflow.parameters.app-name}}"
          - name: environment
            value: "{{workflow.parameters.environment}}"
    
    - - name: deploy-new-version
        template: deploy-version
        arguments:
          parameters:
          - name: app-name
            value: "{{workflow.parameters.app-name}}"
          - name: environment
            value: "{{workflow.parameters.environment}}"
          - name: image-tag
            value: "{{workflow.parameters.image-tag}}"
    
    - - name: health-check
        template: verify-deployment
        arguments:
          parameters:
          - name: app-name
            value: "{{workflow.parameters.app-name}}"
          - name: environment
            value: "{{workflow.parameters.environment}}"
    
    - - name: rollback
        template: rollback-deployment
        when: "{{steps.health-check.outputs.result}} != 'success'"
        arguments:
          parameters:
          - name: app-name
            value: "{{workflow.parameters.app-name}}"
          - name: environment
            value: "{{workflow.parameters.environment}}"

  - name: backup-deployment
    inputs:
      parameters:
      - name: app-name
      - name: environment
    script:
      image: bitnami/kubectl:latest
      command: [bash]
      source: |
        echo "📦 Backing up current deployment..."
        kubectl get deployment {{inputs.parameters.app-name}} -n {{inputs.parameters.environment}} -o yaml > /tmp/backup.yaml
        echo "✅ Backup completed"

  - name: deploy-version
    inputs:
      parameters:
      - name: app-name
      - name: environment
      - name: image-tag
    script:
      image: bitnami/kubectl:latest
      command: [bash]
      source: |
        echo "🚀 Deploying {{inputs.parameters.app-name}}:{{inputs.parameters.image-tag}} to {{inputs.parameters.environment}}"
        # Simular deployment
        echo "✅ Deployment completed"

  - name: verify-deployment
    inputs:
      parameters:
      - name: app-name
      - name: environment
    outputs:
      result: "{{steps.health-check.outputs.result}}"
    script:
      image: curlimages/curl:latest
      command: [sh]
      source: |
        echo "🔍 Verifying deployment health..."
        # Simular health check
        echo "✅ Health check passed"
        echo "success"

  - name: rollback-deployment
    inputs:
      parameters:
      - name: app-name
      - name: environment
    script:
      image: bitnami/kubectl:latest
      command: [bash]
      source: |
        echo "⏪ Rolling back deployment..."
        kubectl apply -f /tmp/backup.yaml
        echo "✅ Rollback completed"
