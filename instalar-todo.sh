#!/bin/bash

# GitOps Multi-Cluster Infrastructure - Instalaci√≥n Completa
# Arquitectura: 3 clusters (dev/pre/pro) con gesti√≥n centralizada desde DEV
# Autor: GitOps Infrastructure Team
# Versi√≥n: 2.0 Optimizada - Corregida

set -euo pipefail  # Modo estricto: salir en errores, variables no definidas, errores en pipes

# Configuraci√≥n para instalaci√≥n desatendida
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none
export NEEDRESTART_MODE=a

# Deshabilitar prompts interactivos
export ARGOCD_OPTS="--plaintext --grpc-web"
export MINIKUBE_IN_STYLE=false

# Colores para la salida
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Variables globales optimizadas
CLUSTER_DEV="gitops-dev"
CLUSTER_PRE="gitops-pre" 
CLUSTER_PRO="gitops-pro"
PORTFORWARD_PID=""
KUBERNETES_VERSION="v1.33.1"  # Versi√≥n m√°s reciente disponible
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Configuraci√≥n de recursos calculada seg√∫n componentes reales
DEV_MEMORY="8192"  # 8GB: 5.6GB componentes + 2.4GB overhead/buffers
DEV_CPUS="4"       # 4 CPUs: 2.6 componentes + 1.4 overhead/picos
DEV_DISK="50g"     # 50GB: im√°genes, logs, datos persistentes

PRE_MEMORY="2048"  # 2GB: solo aplicaciones sencillas para GitOps promotion testing
PRE_CPUS="2"       # 2 CPUs: recursos m√≠nimos para apps sencillas
PRE_DISK="2g"      # 2GB: solo para apps sencillas, sin herramientas de infra

PRO_MEMORY="2048"  # 2GB: solo aplicaciones sencillas para GitOps promotion demos
PRO_CPUS="2"       # 2 CPUs: recursos m√≠nimos para apps sencillas  
PRO_DISK="2g"      # 2GB: solo para apps sencillas, sin herramientas de infra

# Array de validaci√≥n de UIs organizadas por tipo
declare -A UI_URLS=(
    # GitOps Core
    ["ArgoCD"]="http://localhost:8080"
    ["Kargo"]="http://localhost:8081"
    ["ArgoCD_Dex"]="http://localhost:8082"
    
    # Progressive Delivery & Event-Driven GitOps
    ["Argo_Workflows"]="http://localhost:8083"
    ["Argo_Rollouts"]="http://localhost:8084"
    ["Argo_Events"]="http://localhost:8089"
    
    # Observability
    ["Grafana"]="http://localhost:8085"
    ["Prometheus"]="http://localhost:8086"
    ["AlertManager"]="http://localhost:8087"
    ["Jaeger"]="http://localhost:8088"
    
    # Storage & Tools
    ["MinIO_Console"]="http://localhost:8091"
    
    # Desarrollo & Gesti√≥n
    ["Gitea"]="http://localhost:8092"  
    ["K8s_Dashboard"]="http://localhost:8093"
)

declare -A UI_STATUS

mostrar_banner() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üöÄ GITOPS MULTI-CLUSTER INFRASTRUCTURE üöÄ                ‚ïë"
    echo "‚ïë                                                                              ‚ïë"
    echo "‚ïë  üèóÔ∏è  Arquitectura: 3 Clusters (DEV/PRE/PRO) con ArgoCD + Kargo            ‚ïë"
    echo "‚ïë  üìä  Stack: Prometheus, Grafana, Jaeger, Loki, MinIO, Gitea                ‚ïë"
    echo "‚ïë  üîÑ  GitOps: Continuous Deployment + Progressive Delivery                   ‚ïë"
    echo "‚ïë  üéØ  Objetivo: Plataforma empresarial completa lista para producci√≥n       ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

mostrar_arquitectura() {
    echo -e "${YELLOW}"
    echo "üèóÔ∏è ARQUITECTURA MULTI-CLUSTER ROBUSTA:"
    echo "========================================"
    echo "üè≠ Cluster gitops-dev (${DEV_MEMORY}MB RAM, ${DEV_CPUS} CPU, ${DEV_DISK}): Gesti√≥n centralizada y herramientas"
    echo "üè≠ Cluster gitops-pre (${PRE_MEMORY}MB RAM, ${PRE_CPUS} CPU, ${PRE_DISK}): Entorno de preproducci√≥n"
    echo "üè≠ Cluster gitops-pro (${PRO_MEMORY}MB RAM, ${PRO_CPUS} CPU, ${PRO_DISK}): Entorno de producci√≥n"
    echo "üõ† Configuraci√≥n: RECURSOS OPTIMIZADOS por componente real"
    echo "üìü Kubernetes Version: $KUBERNETES_VERSION"
    echo ""
    echo "üì¶ HERRAMIENTAS EN DEV (controlan todos los clusters):"
    echo "‚îú‚îÄ üîÑ ArgoCD v3.0.11: Gesti√≥n GitOps multi-cluster"
    echo "‚îú‚îÄ ÔøΩ ApplicationSet v0.4.5: Multi-cluster app generation"
    echo "‚îú‚îÄ ÔøΩüö¢ Kargo v1.6.1: Promociones autom√°ticas entre entornos"
    echo "‚îú‚îÄ üìä Prometheus Stack v75.13.0: Monitoreo centralizado"
    echo "‚îú‚îÄ üìà Grafana v8.17.4: Dashboards y visualizaci√≥n"
    echo "‚îú‚îÄ üìù Loki v6.33.0: Agregaci√≥n de logs"
    echo "‚îú‚îÄ üîç Jaeger v3.4.1: Distributed tracing"
    echo "‚îú‚îÄ üîí Cert-Manager v1.18.2: Gesti√≥n de certificados"
    echo "‚îú‚îÄ üîê External Secrets v0.18.2: Gesti√≥n de secretos"
    echo "‚îú‚îÄ üåê NGINX Ingress v4.13.0: Ingress controller"
    echo "‚îú‚îÄ üè™ MinIO: Object storage S3-compatible"
    echo "‚îú‚îÄ üêô Gitea: Git repository management"
    echo "‚îú‚îÄ ‚ö° Argo Rollouts v1.8.3: Progressive delivery"
    echo "‚îú‚îÄ üåä Argo Workflows v3.7.0: Workflow orchestration" 
    echo "‚îú‚îÄ üì° Argo Events v1.9.2: Event-driven GitOps automation"
    echo "‚îî‚îÄ üîî Argo Notifications v1.2.1: GitOps alerts & integrations"
    echo ""
    echo "üîÑ FLUJO GITOPS OPTIMIZADO:"
    echo "Git Push ‚Üí ArgoCD-DEV ‚Üí Deploy dev/pre/pro ‚Üí Kargo ‚Üí Auto-Promote"
    echo -e "${NC}"
}

verificar_dependencias() {
    echo -e "${BLUE}üîç Verificando dependencias del sistema...${NC}"
    
    local dependencias_requeridas=("minikube" "kubectl" "helm" "docker" "curl" "netstat" "fuser")
    local dependencias_opcionales=("jq" "yq")
    local faltantes_requeridas=()
    local faltantes_opcionales=()
    local auto_instalables=("curl" "netstat" "jq" "yq" "fuser")
    
    # Verificar dependencias requeridas
    for dep in "${dependencias_requeridas[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            faltantes_requeridas+=("$dep")
        else
            echo -e "${GREEN}‚úÖ $dep encontrado${NC}"
        fi
    done
    
    # Verificar dependencias opcionales
    for dep in "${dependencias_opcionales[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            faltantes_opcionales+=("$dep")
        else
            echo -e "${GREEN}‚úÖ $dep encontrado (opcional)${NC}"
        fi
    done
    
    # Funci√≥n para instalar dependencias autom√°ticamente
    instalar_dependencia_auto() {
        local dep="$1"
        echo -e "${YELLOW}üì¶ Instalando autom√°ticamente: $dep${NC}"
        
        case $dep in
            "curl")
                if sudo apt-get update -qq && sudo apt-get install -y -qq curl; then
                    echo -e "${GREEN}‚úÖ curl instalado exitosamente${NC}"
                    return 0
                fi
                ;;
            "netstat")
                if sudo apt-get install -y -qq net-tools; then
                    echo -e "${GREEN}‚úÖ net-tools (netstat) instalado exitosamente${NC}"
                    return 0
                fi
                ;;
            "fuser")
                if sudo apt-get install -y -qq psmisc; then
                    echo -e "${GREEN}‚úÖ psmisc (fuser) instalado exitosamente${NC}"
                    return 0
                fi
                ;;
            "jq")
                if sudo apt-get install -y -qq jq; then
                    echo -e "${GREEN}‚úÖ jq instalado exitosamente${NC}"
                    return 0
                fi
                ;;
            "yq")
                echo "üîó Instalando yq desde GitHub releases..."
                if curl -L -s "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64" -o /tmp/yq && \
                   chmod +x /tmp/yq && sudo mv /tmp/yq /usr/local/bin/yq; then
                    echo -e "${GREEN}‚úÖ yq instalado exitosamente${NC}"
                    return 0
                fi
                ;;
        esac
        
        echo -e "${RED}‚ùå Error al instalar $dep autom√°ticamente${NC}"
        return 1
    }
    
    # Intentar instalar dependencias autom√°ticamente
    if [ ${#faltantes_requeridas[@]} -ne 0 ] || [ ${#faltantes_opcionales[@]} -ne 0 ]; then
        echo ""
        echo -e "${BLUE}üîß Intentando instalar dependencias autom√°ticamente...${NC}"
        
        # Instalar dependencias requeridas auto-instalables
        local nuevas_faltantes_requeridas=()
        for dep in "${faltantes_requeridas[@]}"; do
            if [[ " ${auto_instalables[*]} " =~ " ${dep} " ]]; then
                if ! instalar_dependencia_auto "$dep"; then
                    nuevas_faltantes_requeridas+=("$dep")
                fi
            else
                nuevas_faltantes_requeridas+=("$dep")
            fi
        done
        
        # Instalar dependencias opcionales auto-instalables
        local nuevas_faltantes_opcionales=()
        for dep in "${faltantes_opcionales[@]}"; do
            if [[ " ${auto_instalables[*]} " =~ " ${dep} " ]]; then
                instalar_dependencia_auto "$dep" || nuevas_faltantes_opcionales+=("$dep")
            else
                nuevas_faltantes_opcionales+=("$dep")
            fi
        done
        
        # Actualizar arrays de faltantes
        faltantes_requeridas=("${nuevas_faltantes_requeridas[@]}")
        faltantes_opcionales=("${nuevas_faltantes_opcionales[@]}")
    fi
    
    # Reportar dependencias que no pudieron instalarse autom√°ticamente
    if [ ${#faltantes_requeridas[@]} -ne 0 ]; then
        echo -e "${RED}‚ùå Dependencias REQUERIDAS que requieren instalaci√≥n manual: ${faltantes_requeridas[*]}${NC}"
        echo ""
        echo "üì¶ INSTRUCCIONES DE INSTALACI√ìN MANUAL:"
        echo "======================================="
        for dep in "${faltantes_requeridas[@]}"; do
            case $dep in
                "minikube")
                    echo "üîó Minikube: curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && sudo install minikube-linux-amd64 /usr/local/bin/minikube"
                    ;;
                "kubectl")
                    echo "üîó kubectl: curl -LO https://dl.k8s.io/release/\$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/"
                    ;;
                "helm")
                    echo "üîó Helm: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash"
                    ;;
                "docker")
                    echo "üîó Docker: sudo apt-get update && sudo apt-get install docker.io && sudo usermod -aG docker \$USER"
                    echo "   üìù Nota: Despu√©s de instalar Docker, reinicia la sesi√≥n o ejecuta 'newgrp docker'"
                    ;;
                "curl")
                    echo "üîó curl: sudo apt-get install curl (auto-instalaci√≥n fall√≥)"
                    ;;
                "netstat")
                    echo "üîó netstat: sudo apt-get install net-tools (auto-instalaci√≥n fall√≥)"
                    ;;
                "fuser")
                    echo "üîó fuser: sudo apt-get install psmisc (auto-instalaci√≥n fall√≥)"
                    ;;
            esac
        done
        echo ""
        echo -e "${RED}Por favor instala las dependencias faltantes manualmente y ejecuta el script nuevamente.${NC}"
        exit 1
    fi
    
    if [ ${#faltantes_opcionales[@]} -ne 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Dependencias OPCIONALES faltantes: ${faltantes_opcionales[*]}${NC}"
        echo "Estas no son cr√≠ticas, pero pueden mejorar la experiencia."
    fi
    
    # Verificaciones adicionales
    echo ""
    echo "üîç Verificaciones adicionales:"
    
    # Verificar Docker daemon
    if ! docker info >&/dev/null; then
        echo -e "${RED}‚ùå Docker daemon no est√° ejecut√°ndose${NC}"
        echo "üîß Soluci√≥n: sudo systemctl start docker"
        exit 1
    else
        echo -e "${GREEN}‚úÖ Docker daemon activo${NC}"
    fi
    
    # Verificar permisos Docker
    if ! docker ps >&/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è No tienes permisos para usar Docker sin sudo${NC}"
        echo "üîß Soluci√≥n: sudo usermod -aG docker \$USER && newgrp docker"
        echo "üìù Nota: Puede requerir reiniciar la sesi√≥n"
    else
        echo -e "${GREEN}‚úÖ Permisos Docker configurados${NC}"
    fi
    
    # Verificar versiones
    echo ""
    echo "üìã Versiones instaladas:"
    echo "- Minikube: $(minikube version --short 2>/dev/null || echo 'Error al obtener versi√≥n')"
    echo "- kubectl: $(kubectl version --client=true --short 2>/dev/null | grep Client || echo 'Error al obtener versi√≥n')"
    echo "- Helm: $(helm version --short 2>/dev/null || echo 'Error al obtener versi√≥n')"
    echo "- Docker: $(docker --version 2>/dev/null || echo 'Error al obtener versi√≥n')"
    
    echo -e "${GREEN}‚úÖ Todas las dependencias requeridas est√°n disponibles${NC}"
}

limpiar_clusters_existentes() {
    echo -e "${YELLOW}üßπ Limpiando clusters existentes...${NC}"
    
    local clusters=("$CLUSTER_DEV" "$CLUSTER_PRE" "$CLUSTER_PRO")
    local clusters_eliminados=0
    
    for cluster in "${clusters[@]}"; do
        if minikube status -p "$cluster" >&/dev/null; then
            echo "üóëÔ∏è Eliminando cluster: $cluster"
            if minikube delete -p "$cluster" --purge >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ Cluster $cluster eliminado exitosamente${NC}"
                clusters_eliminados=$((clusters_eliminados + 1))
            else
                echo -e "${YELLOW}‚ö†Ô∏è Error al eliminar cluster $cluster (puede no existir)${NC}"
            fi
        else
            echo "‚ÑπÔ∏è Cluster $cluster no existe - saltando"
        fi
    done
    
    if [ $clusters_eliminados -gt 0 ]; then
        echo -e "${GREEN}‚úÖ Limpieza completada: $clusters_eliminados clusters eliminados${NC}"
    else
        echo -e "${GREEN}‚úÖ Limpieza completada: no hab√≠a clusters que eliminar${NC}"
    fi
}

crear_clusters() {
    echo -e "${BLUE}üèóÔ∏è Creando clusters Minikube optimizados...${NC}"
    
    # Verificar que Docker est√© ejecut√°ndose
    if ! docker info >&/dev/null; then
        echo -e "${RED}‚ùå Docker no est√° ejecut√°ndose. Por favor, inicia Docker primero.${NC}"
        exit 1
    fi
    
    # Funci√≥n auxiliar para crear un cluster con reintentos
    crear_cluster_con_reintentos() {
        local cluster_name="$1"
        local memory="$2"
        local cpus="$3"
        local disk="$4"
        local max_intentos=3
        local intento=1
        
        while [ $intento -le $max_intentos ]; do
            echo "üè≠ Creando cluster $cluster_name (${memory}MB RAM, ${cpus} CPU, ${disk}) - Intento $intento/$max_intentos"
            
            if minikube start -p "$cluster_name" \
                --memory="$memory" \
                --cpus="$cpus" \
                --disk-size="$disk" \
                --driver=docker \
                --kubernetes-version="$KUBERNETES_VERSION" \
                --wait=true \
                --wait-timeout=600s; then
                
                echo -e "${GREEN}‚úÖ Cluster $cluster_name creado exitosamente${NC}"
                
                # Habilitar addons necesarios
                minikube addons enable ingress -p "$cluster_name" || echo "‚ö†Ô∏è Warning: No se pudo habilitar ingress addon"
                minikube addons enable metrics-server -p "$cluster_name" || echo "‚ö†Ô∏è Warning: No se pudo habilitar metrics-server addon"
                
                return 0
            else
                echo -e "${YELLOW}‚ö†Ô∏è Fall√≥ el intento $intento para crear $cluster_name${NC}"
                intento=$((intento + 1))
                
                if [ $intento -le $max_intentos ]; then
                    echo "üîÑ Limpiando y reintentando en 10 segundos..."
                    minikube delete -p "$cluster_name" >/dev/null 2>&1 || true
                    sleep 10
                fi
            fi
        done
        
        echo -e "${RED}‚ùå No se pudo crear el cluster $cluster_name despu√©s de $max_intentos intentos${NC}"
        return 1
    }
    
    # Crear solo cluster DEV inicialmente - Optimizaci√≥n secuencial
    echo "üéØ Creando cluster DEV primero para validaci√≥n..."
    crear_cluster_con_reintentos "$CLUSTER_DEV" "$DEV_MEMORY" "$DEV_CPUS" "$DEV_DISK"
    
    echo -e "${GREEN}‚úÖ Cluster DEV creado exitosamente${NC}"
}

crear_clusters_adicionales() {
    echo -e "${BLUE}üèóÔ∏è Creando clusters PRE y PRO despu√©s de validar DEV...${NC}"
    
    # Verificar que Docker est√© ejecut√°ndose
    if ! docker info >&/dev/null; then
        echo -e "${RED}‚ùå Docker no est√° ejecut√°ndose. Por favor, inicia Docker primero.${NC}"
        exit 1
    fi
    
    # Funci√≥n auxiliar para crear un cluster con reintentos (reutilizada)
    crear_cluster_con_reintentos() {
        local cluster_name="$1"
        local memory="$2"
        local cpus="$3"
        local disk="$4"
        local max_intentos=3
        local intento=1
        
        while [ $intento -le $max_intentos ]; do
            echo "üè≠ Creando cluster $cluster_name (${memory}MB RAM, ${cpus} CPU, ${disk}) - Intento $intento/$max_intentos"
            
            if minikube start -p "$cluster_name" \
                --memory="$memory" \
                --cpus="$cpus" \
                --disk-size="$disk" \
                --driver=docker \
                --kubernetes-version="$KUBERNETES_VERSION" \
                --wait=true \
                --wait-timeout=600s; then
                
                echo -e "${GREEN}‚úÖ Cluster $cluster_name creado exitosamente${NC}"
                
                # Habilitar addons necesarios
                minikube addons enable ingress -p "$cluster_name" || echo "‚ö†Ô∏è Warning: No se pudo habilitar ingress addon"
                minikube addons enable metrics-server -p "$cluster_name" || echo "‚ö†Ô∏è Warning: No se pudo habilitar metrics-server addon"
                
                return 0
            else
                echo -e "${YELLOW}‚ö†Ô∏è Fall√≥ el intento $intento para crear $cluster_name${NC}"
                intento=$((intento + 1))
                
                if [ $intento -le $max_intentos ]; then
                    echo "üîÑ Limpiando y reintentando en 10 segundos..."
                    minikube delete -p "$cluster_name" >/dev/null 2>&1 || true
                    sleep 10
                fi
            fi
        done
        
        echo -e "${RED}‚ùå No se pudo crear el cluster $cluster_name despu√©s de $max_intentos intentos${NC}"
        return 1
    }
    
    # Crear cluster PRE - Recursos para testing
    crear_cluster_con_reintentos "$CLUSTER_PRE" "$PRE_MEMORY" "$PRE_CPUS" "$PRE_DISK"
    
    # Crear cluster PRE - Recursos para simulaci√≥n de producci√≥n
    crear_cluster_con_reintentos "$CLUSTER_PRO" "$PRO_MEMORY" "$PRO_CPUS" "$PRO_DISK"
    
    echo -e "${GREEN}‚úÖ Clusters PRE y PRO creados exitosamente${NC}"
}

configurar_contextos() {
    echo -e "${BLUE}‚öôÔ∏è Configurando contextos de kubectl...${NC}"
    
    # Cambiar al cluster DEV como principal
    kubectl config use-context "$CLUSTER_DEV"
    
    # Verificar contextos disponibles
    echo "üìã Contextos disponibles:"
    kubectl config get-contexts
    
    echo -e "${GREEN}‚úÖ Contextos configurados${NC}"
}

instalar_argocd() {
    echo -e "${BLUE}üîÑ Instalando ArgoCD en DEV con acceso an√≥nimo completo...${NC}"
    
    kubectl config use-context "$CLUSTER_DEV"
    
    # Crear namespace
    kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
    
    # Instalar ArgoCD
    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v3.0.11/manifests/install.yaml
    
    # Esperar a que ArgoCD est√© listo
    echo "‚è≥ Esperando a que ArgoCD est√© listo..."
    kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
    
    # Configurar acceso COMPLETAMENTE AN√ìNIMO - sin login requerido
    echo "üîì Configurando acceso an√≥nimo completo..."
    
    # 1. Configurar servidor inseguro (sin TLS)
    kubectl patch configmap argocd-cmd-params-cm -n argocd --patch '{"data":{"server.insecure":"true"}}'
    
    # 2. Configurar acceso an√≥nimo en argocd-cm
    kubectl patch configmap argocd-cm -n argocd --patch '{
      "data": {
        "url": "http://localhost:8080",
        "users.anonymous.enabled": "true",
        "policy.default": "role:admin",
        "policy.csv": "p, role:anonymous, applications, *, */*, allow\np, role:anonymous, clusters, *, *, allow\np, role:anonymous, repositories, *, *, allow\np, role:anonymous, certificates, *, *, allow\np, role:anonymous, accounts, *, *, allow\np, role:anonymous, gpgkeys, *, *, allow\np, role:anonymous, logs, *, *, allow\np, role:anonymous, exec, *, */*, allow\ng, argocd:anonymous, role:admin"
      }
    }'
    
    # 3. Deshabilitar Dex (authentication)
    kubectl patch configmap argocd-cmd-params-cm -n argocd --patch '{"data":{"dex.disable.authentication":"true"}}'
    
    # 4. Configurar deployment con argumentos an√≥nimos
    kubectl patch deployment argocd-server -n argocd --patch '{
      "spec": {
        "template": {
          "spec": {
            "containers": [{
              "name": "argocd-server",
              "args": [
                "argocd-server",
                "--insecure",
                "--disable-auth"
              ]
            }]
          }
        }
      }
    }'
    
    # 5. Reiniciar ArgoCD server
    echo "üîÑ Reiniciando ArgoCD server con configuraci√≥n an√≥nima..."
    kubectl rollout restart deployment argocd-server -n argocd
    kubectl rollout status deployment argocd-server -n argocd --timeout=300s
    
    # 6. Verificar que el servidor est√© respondiendo
    echo "üîç Verificando acceso an√≥nimo..."
    sleep 10
    
    echo -e "${GREEN}‚úÖ ArgoCD instalado con acceso an√≥nimo completo (sin login)${NC}"
}

aplicar_infraestructura() {
    echo -e "${BLUE}üì¶ Aplicando infraestructura GitOps...${NC}"
    
    kubectl config use-context "$CLUSTER_DEV"
    
    # Verificar que estamos en el directorio correcto
    if [[ ! -f "$SCRIPT_DIR/appset-gitops-infra.yaml" ]]; then
        echo -e "${RED}‚ùå Archivo appset-gitops-infra.yaml no encontrado en $SCRIPT_DIR${NC}"
        echo "üìÅ Archivos disponibles:"
        ls -la "$SCRIPT_DIR"/*.yaml 2>/dev/null || echo "‚ùå No se encontraron archivos YAML"
        return 1
    fi
    
    # Aplicar las aplicaciones de infraestructura principal
    echo "üì¶ Aplicando aplicaciones de infraestructura principal..."
    
    # Eliminar ApplicationSets existentes para evitar conflictos de resourceVersion
    kubectl delete applicationset gitops-infra-components -n argocd --ignore-not-found=true
    kubectl delete applicationset gitops-aplicaciones -n argocd --ignore-not-found=true
    
    # Esperar un momento para la limpieza
    sleep 3
    
    if kubectl apply -f "$SCRIPT_DIR/appset-gitops-infra.yaml" && kubectl apply -f "$SCRIPT_DIR/appset-aplicaciones.yaml"; then
        echo -e "${GREEN}‚úÖ Aplicaciones de infraestructura creadas${NC}"
    else
        echo -e "${RED}‚ùå Error al aplicar aplicaciones de infraestructura${NC}"
        return 1
    fi
    
    # Aplicar componentes individuales si existen
    if [[ -d "$SCRIPT_DIR/componentes" ]]; then
        echo "üìÇ Aplicando componentes desde directorio componentes/"
        local componentes_aplicados=0
        local componentes_fallidos=0
        
        # Aplicar componentes en orden espec√≠fico para dependencias
        local orden_componentes=(
            "cert-manager"
            "external-secrets" 
            "ingress-nginx"
            "monitoring"
            "loki"
            "jaeger"
            "minio"
            "gitea"
            "kargo"
            "argo-rollouts"
            "argo-workflows"
            "argo-events"
            "argocd-applicationset"
            "argocd-notifications"
            "grafana"
        )
        
        # Primero aplicar componentes en orden
        for componente in "${orden_componentes[@]}"; do
            if [[ -f "$SCRIPT_DIR/componentes/$componente"/*.yaml ]]; then
                echo "üì¶ Aplicando componente: $componente"
                if kubectl apply -f "$SCRIPT_DIR/componentes/$componente"/*.yaml; then
                    componentes_aplicados=$((componentes_aplicados + 1))
                    echo -e "${GREEN}‚úÖ Componente $componente aplicado${NC}"
                    sleep 2  # Peque√±a pausa entre componentes
                else
                    componentes_fallidos=$((componentes_fallidos + 1))
                    echo -e "${YELLOW}‚ö†Ô∏è Error al aplicar componente $componente${NC}"
                fi
            fi
        done
        
        # Luego aplicar cualquier componente restante
        find "$SCRIPT_DIR/componentes" -name "*.yaml" -type f | while read -r archivo; do
            componente_nombre=$(basename "$(dirname "$archivo")")
            if [[ ! " ${orden_componentes[*]} " =~ " ${componente_nombre} " ]]; then
                echo "üì¶ Aplicando componente adicional: $componente_nombre"
                kubectl apply -f "$archivo" || echo "‚ö†Ô∏è Error en $archivo"
            fi
        done
        
        echo -e "${GREEN}‚úÖ Componentes aplicados: $componentes_aplicados, Fallidos: $componentes_fallidos${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Directorio componentes/ no encontrado en $SCRIPT_DIR${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Infraestructura GitOps aplicada${NC}"
}

configurar_multi_cluster() {
    echo -e "${BLUE}üîó Configurando acceso multi-cluster en ArgoCD...${NC}"
    
    # Primero esperar a que ArgoCD est√© disponible
    kubectl config use-context "$CLUSTER_DEV"
    echo "‚è≥ Esperando a que ArgoCD API est√© disponible..."
    
    # Configurar port-forward temporal para ArgoCD API
    kubectl port-forward -n argocd service/argocd-server 8080:80 >/dev/null 2>&1 &
    local pf_pid=$!
    sleep 15
    
    # Solo agregar clusters que existan
    if minikube status -p "$CLUSTER_PRE" &> /dev/null; then
        echo "üîó Agregando cluster PRE a ArgoCD..."
        kubectl config use-context "$CLUSTER_PRE"
        yes y | timeout 30 argocd cluster add "$CLUSTER_PRE" --server localhost:8080 --insecure --grpc-web 2>/dev/null || true
    else
        echo "‚ö†Ô∏è Cluster PRE no existe - saltando configuraci√≥n"
    fi
    
    if minikube status -p "$CLUSTER_PRO" &> /dev/null; then
        echo "üîó Agregando cluster PRO a ArgoCD..."
        kubectl config use-context "$CLUSTER_PRO"
        yes y | timeout 30 argocd cluster add "$CLUSTER_PRO" --server localhost:8080 --insecure --grpc-web 2>/dev/null || true
    else
        echo "‚ö†Ô∏è Cluster PRO no existe - saltando configuraci√≥n"
    fi
    
    # Limpiar port-forward temporal
    kill $pf_pid 2>/dev/null || true
    
    # Volver al cluster DEV
    kubectl config use-context "$CLUSTER_DEV"
    
    echo -e "${GREEN}‚úÖ Multi-cluster configurado${NC}"
}

verificar_y_arreglar_servicios() {
    echo -e "${BLUE}üîß Verificando y corrigiendo servicios problem√°ticos...${NC}"
    
    kubectl config use-context "$CLUSTER_DEV"
    
    # Verificar ArgoCD server
    if ! kubectl get pod -l app.kubernetes.io/component=server -n argocd | grep -q Running; then
        echo "üîÑ Reiniciando ArgoCD server..."
        kubectl rollout restart deployment argocd-server -n argocd
        kubectl rollout status deployment argocd-server -n argocd --timeout=300s
    fi
    
    # Sincronizar aplicaciones pendientes autom√°ticamente
    echo "üîÑ Sincronizando aplicaciones ArgoCD pendientes..."
    local apps_pendientes=$(kubectl get applications -n argocd --no-headers | grep -E "(Unknown|OutOfSync)" | awk '{print $1}' || true)
    
    if [[ -n "$apps_pendientes" ]]; then
        echo "üìã Aplicaciones a sincronizar: $apps_pendientes"
        for app in $apps_pendientes; do
            echo "üîÑ Habilitando auto-sync para: $app"
            kubectl patch application "$app" -n argocd --type merge -p '{
                "spec": {
                    "syncPolicy": {
                        "automated": {
                            "prune": true,
                            "selfHeal": true
                        }
                    }
                }
            }' 2>/dev/null || true
            
            echo "üîÑ Forzando sincronizaci√≥n de: $app"
            kubectl patch application "$app" -n argocd --type merge -p '{
                "operation": {
                    "sync": {}
                }
            }' 2>/dev/null || true
        done
        echo "‚è≥ Esperando 30s para que las aplicaciones se sincronicen..."
        sleep 30
    else
        echo "‚úÖ Todas las aplicaciones est√°n sincronizadas"
    fi
    
    # Verificar Kargo - si no existe el namespace, intentar crearlo
    if ! kubectl get namespace kargo >/dev/null 2>&1; then
        echo "‚ö†Ô∏è Namespace kargo no existe, sera creado por la aplicaci√≥n ArgoCD"
    else
        # Si existe, verificar que los pods est√©n funcionando
        if ! kubectl get pods -n kargo 2>/dev/null | grep -q Running; then
            echo "üîÑ Esperando a que Kargo se despliegue..."
            kubectl wait --for=condition=Ready pods --all -n kargo --timeout=300s 2>/dev/null || echo "‚ö†Ô∏è Kargo puede tardar m√°s tiempo en desplegarse"
        fi
    fi
    
    # Verificar cert-manager (necesario para Kargo)
    if ! kubectl get namespace cert-manager >/dev/null 2>&1; then
        echo "‚ö†Ô∏è cert-manager no encontrado, necesario para Kargo"
    fi
    
    echo -e "${GREEN}‚úÖ Verificaci√≥n de servicios completada${NC}"
}

configurar_port_forwards() {
    echo -e "${BLUE}üåê Configurando port-forwards optimizados...${NC}"
    
    # Matar port-forwards previos de forma m√°s agresiva
    echo "üßπ Limpiando port-forwards previos..."
    pkill -f "kubectl.*port-forward" 2>/dev/null || true
    sleep 3
    
    # Liberar puertos espec√≠ficos si est√°n ocupados
    for puerto in 8080 8081 8082 8083 8084 8085 8086 8087 8088 8090 8091 8092 8093; do
        if netstat -tuln | grep -q ":$puerto "; then
            echo "üîå Liberando puerto $puerto..."
            fuser -k $puerto/tcp 2>/dev/null || true
        fi
    done
    sleep 2
    
    # Funci√≥n para crear port-forward con reintentos y validaci√≥n mejorada
    crear_port_forward() {
        local servicio="$1"
        local namespace="$2"
        local puerto_local="$3"
        local puerto_remoto="$4"
        local max_intentos=3
        
        # Verificar que el puerto est√© libre
        if netstat -tuln | grep -q ":$puerto_local "; then
            echo "‚ö†Ô∏è Puerto $puerto_local ocupado, liberando..."
            fuser -k $puerto_local/tcp 2>/dev/null || true
            sleep 2
        fi
        
        for intento in $(seq 1 $max_intentos); do
            echo "üîó Configurando port-forward para $servicio ($puerto_local:$puerto_remoto) - Intento $intento"
            
            # Usar nohup para evitar que se maten los procesos
            nohup kubectl port-forward -n "$namespace" "service/$servicio" "$puerto_local:$puerto_remoto" >/dev/null 2>&1 &
            local pf_pid=$!
            sleep 5  # Aumentar tiempo de espera para estabilizaci√≥n
            
            # Verificar que el port-forward est√© funcionando con m√∫ltiples m√©todos
            local puerto_activo=false
            if kill -0 $pf_pid 2>/dev/null; then
                # Verificar que el puerto est√© escuchando
                if netstat -tuln | grep -q ":$puerto_local "; then
                    puerto_activo=true
                else
                    # Esperar un poco m√°s para algunos servicios lentos
                    sleep 3
                    if netstat -tuln | grep -q ":$puerto_local "; then
                        puerto_activo=true
                    fi
                fi
            fi
            
            if [ "$puerto_activo" = true ]; then
                echo -e "${GREEN}‚úÖ Port-forward activo para $servicio en puerto $puerto_local (PID: $pf_pid)${NC}"
                return 0
            else
                kill $pf_pid 2>/dev/null || true
            fi
            
            if [ $intento -lt $max_intentos ]; then
                echo "‚ö†Ô∏è Reintentando port-forward para $servicio..."
                sleep 5
            fi
        done
        
        echo -e "${YELLOW}‚ö†Ô∏è No se pudo establecer port-forward para $servicio${NC}"
        return 1
    }
    
    # Cambiar al cluster DEV donde est√°n todos los servicios
    kubectl config use-context "$CLUSTER_DEV"
    
    # Esperar a que los servicios est√©n disponibles
    echo "‚è≥ Esperando a que los servicios est√©n disponibles..."
    sleep 30
    
    # Configurar port-forwards para servicios principales
    declare -A servicios_pf=(
        ["argocd-server argocd 8080 80"]=""
        ["kargo-api kargo 8081 80"]=""
        ["argocd-dex-server argocd 8082 5556"]=""
        ["argo-workflows-server argo-workflows 8083 2746"]=""
        ["argo-rollouts-dashboard argo-rollouts 8084 3100"]=""
        ["argo-events-webhook argo-events 8089 12000"]=""
        ["prometheus-stack-grafana monitoring 8085 80"]=""
        ["prometheus-stack-kube-prom-prometheus monitoring 8086 9090"]=""
        ["prometheus-stack-kube-prom-alertmanager monitoring 8087 9093"]=""
        ["jaeger-query monitoring 8088 16686"]=""
        # ["loki-gateway monitoring 8089 80"]=""  # Loki no tiene UI web propia, se consulta via Grafana
        # ["minio minio 8090 9000"]=""  # MinIO API no tiene UI web propia, solo API S3-compatible
        ["minio-console minio 8091 9001"]=""
        ["gitea-http gitea 8092 3000"]=""
        ["kubernetes-dashboard-web kubernetes-dashboard 8093 8000"]=""
    )
    
    # Crear port-forwards
    local exitosos=0
    local fallidos=0
    
    for servicio_info in "${!servicios_pf[@]}"; do
        read -r servicio namespace puerto_local puerto_remoto <<< "$servicio_info"
        
        # Verificar que el servicio existe antes de hacer port-forward
        if kubectl get service "$servicio" -n "$namespace" >/dev/null 2>&1; then
            if crear_port_forward "$servicio" "$namespace" "$puerto_local" "$puerto_remoto"; then
                exitosos=$((exitosos + 1))
            else
                fallidos=$((fallidos + 1))
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è Servicio $servicio no encontrado en namespace $namespace${NC}"
            fallidos=$((fallidos + 1))
        fi
        
        sleep 1
    done
    
    echo -e "${GREEN}‚úÖ Port-forwards configurados: $exitosos exitosos, $fallidos fallidos${NC}"
    
    # Verificar port-forwards activos
    echo "üîç Port-forwards activos:"
    netstat -tuln | grep -E ':(808[0-3]|809[0-3])' || echo "‚ùå No se encontraron port-forwards activos"
}

validar_uis() {
    echo -e "${BLUE}üîç Validando acceso a UIs...${NC}"
    
    local uis_operativas=0
    local uis_total=${#UI_URLS[@]}
    
    for ui_name in "${!UI_URLS[@]}"; do
        url="${UI_URLS[$ui_name]}"
        echo -n "üîç Verificando $ui_name ($url)... "
        
        # Mejorar la validaci√≥n con m√°s c√≥digos de estado v√°lidos y timeout m√°s largo
        local response_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" --connect-timeout 10 --max-time 15 2>/dev/null || echo "000")
        
        # C√≥digos de estado que consideramos v√°lidos (incluyendo redirects y algunos errores esperados)
        if [[ "$response_code" =~ ^(200|301|302|401|403|404)$ ]]; then
            UI_STATUS[$ui_name]="‚úÖ OPERATIVA"
            echo -e "${GREEN}‚úÖ ($response_code)${NC}"
            uis_operativas=$((uis_operativas + 1))
        else
            UI_STATUS[$ui_name]="‚ùå NO DISPONIBLE"
            echo -e "${RED}‚ùå ($response_code)${NC}"
        fi
    done
    
    echo ""
    echo -e "${GREEN}‚úÖ Validaci√≥n de UIs completada: $uis_operativas/$uis_total operativas${NC}"
    
    # Si hay menos del 80% operativas, mostrar informaci√≥n de diagn√≥stico
    local porcentaje=$((uis_operativas * 100 / uis_total))
    if [ $porcentaje -lt 80 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Solo $porcentaje% de UIs operativas. Verificando port-forwards...${NC}"
        netstat -tuln | grep -E ':(808[0-3]|809[0-3])' | while read line; do
            puerto=$(echo "$line" | awk '{print $4}' | cut -d: -f2)
            echo "  üîó Puerto $puerto activo"
        done
    fi
}

# Funci√≥n de validaci√≥n estricta para verificar que DEV est√° completamente funcional
validar_dev_completo() {
    echo -e "${BLUE}üîç Validaci√≥n estricta de DEV antes de crear PRE/PRO...${NC}"
    
    local errores=0
    local advertencias=0
    
    # 1. Verificar que ArgoCD est√° ejecut√°ndose
    echo "üìã Verificando ArgoCD..."
    if ! kubectl get pods -n argocd | grep -q "argocd-server.*Running"; then
        echo -e "${RED}‚ùå ArgoCD server no est√° ejecut√°ndose${NC}"
        errores=$((errores + 1))
    else
        echo -e "${GREEN}‚úÖ ArgoCD server ejecut√°ndose${NC}"
    fi
    
    # 2. Verificar ApplicationSets
    echo "üìã Verificando ApplicationSets..."
    local appsets=$(kubectl get applicationset -n argocd 2>/dev/null | wc -l)
    if [ $appsets -lt 2 ]; then
        echo -e "${RED}‚ùå ApplicationSets no encontrados o incompletos${NC}"
        errores=$((errores + 1))
    else
        echo -e "${GREEN}‚úÖ ApplicationSets detectados${NC}"
    fi
    
    # 3. Verificar aplicaciones de infraestructura cr√≠ticas
    echo "üìã Verificando aplicaciones de infraestructura..."
    local apps_criticas=("cert-manager" "external-secrets" "ingress-nginx" "monitoring" "loki" "grafana" "kargo")
    local apps_sincronizadas=0
    
    for app in "${apps_criticas[@]}"; do
        local sync_status=$(kubectl get application "$app" -n argocd -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "NotFound")
        local health_status=$(kubectl get application "$app" -n argocd -o jsonpath='{.status.health.status}' 2>/dev/null || echo "NotFound")
        
        if [ "$sync_status" = "Synced" ] && [ "$health_status" = "Healthy" ]; then
            echo -e "${GREEN}‚úÖ $app: Synced & Healthy${NC}"
            apps_sincronizadas=$((apps_sincronizadas + 1))
        elif [ "$sync_status" = "NotFound" ]; then
            echo -e "${RED}‚ùå $app: Aplicaci√≥n no encontrada${NC}"
            errores=$((errores + 1))
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $app: $sync_status / $health_status${NC}"
            advertencias=$((advertencias + 1))
        fi
    done
    
    # 4. Verificar pods cr√≠ticos ejecut√°ndose
    echo "üìã Verificando pods cr√≠ticos..."
    local namespaces_criticos=("cert-manager" "external-secrets-system" "ingress-nginx" "monitoring" "loki" "grafana" "kargo")
    local namespaces_ok=0
    
    for ns in "${namespaces_criticos[@]}"; do
        local pods_running=$(kubectl get pods -n "$ns" 2>/dev/null | grep -c "Running" || echo "0")
        local pods_total=$(kubectl get pods -n "$ns" 2>/dev/null | tail -n +2 | wc -l || echo "0")
        
        if [ "$pods_total" -eq 0 ]; then
            echo -e "${RED}‚ùå Namespace $ns: Sin pods desplegados${NC}"
            errores=$((errores + 1))
        elif [ "$pods_running" -eq "$pods_total" ]; then
            echo -e "${GREEN}‚úÖ Namespace $ns: $pods_running/$pods_total pods ejecut√°ndose${NC}"
            namespaces_ok=$((namespaces_ok + 1))
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Namespace $ns: $pods_running/$pods_total pods ejecut√°ndose${NC}"
            advertencias=$((advertencias + 1))
        fi
    done
    
    # 5. Verificar UIs (reutilizar validaci√≥n existente)
    validar_uis
    local uis_operativas=0
    for ui_name in "${!UI_STATUS[@]}"; do
        if [[ "${UI_STATUS[$ui_name]}" == *"OPERATIVA"* ]]; then
            uis_operativas=$((uis_operativas + 1))
        fi
    done
    local uis_total=${#UI_URLS[@]}
    local porcentaje_uis=$((uis_operativas * 100 / uis_total))
    
    # Resumen de validaci√≥n
    echo ""
    echo -e "${BLUE}üìä RESUMEN DE VALIDACI√ìN DEV:${NC}"
    echo "================================="
    echo "üî¥ Errores cr√≠ticos: $errores"
    echo "üü° Advertencias: $advertencias"  
    echo "üì± UIs operativas: $uis_operativas/$uis_total ($porcentaje_uis%)"
    echo "üèóÔ∏è Apps cr√≠ticas sincronizadas: $apps_sincronizadas/${#apps_criticas[@]}"
    echo "üõ†Ô∏è Namespaces OK: $namespaces_ok/${#namespaces_criticos[@]}"
    echo ""
    
    # Criterios para continuar con PRE/PRO
    if [ $errores -eq 0 ] && [ $apps_sincronizadas -ge 5 ] && [ $porcentaje_uis -ge 60 ]; then
        echo -e "${GREEN}‚úÖ DEV VALIDADO: Criterios cumplidos para crear PRE/PRO${NC}"
        echo -e "${GREEN}   ‚ñ∫ Sin errores cr√≠ticos${NC}"
        echo -e "${GREEN}   ‚ñ∫ $apps_sincronizadas/${#apps_criticas[@]} apps cr√≠ticas funcionando${NC}"
        echo -e "${GREEN}   ‚ñ∫ $porcentaje_uis% UIs operativas${NC}"
        return 0
    else
        echo -e "${RED}‚ùå DEV NO VALIDADO: No se crear√°n PRE/PRO${NC}"
        echo -e "${RED}   ‚ñ∫ Errores cr√≠ticos: $errores (requerido: 0)${NC}"
        echo -e "${RED}   ‚ñ∫ Apps cr√≠ticas: $apps_sincronizadas/${#apps_criticas[@]} (requerido: ‚â•5)${NC}"
        echo -e "${RED}   ‚ñ∫ UIs operativas: $porcentaje_uis% (requerido: ‚â•60%)${NC}"
        echo ""
        echo -e "${YELLOW}üí° Para crear PRE/PRO manualmente despu√©s de arreglar los problemas:${NC}"
        echo -e "${YELLOW}   $0 clusters${NC}"
        return 1
    fi
}

mostrar_urls_ui() {
    # Ejecutar validaci√≥n primero
    validar_uis
    
    echo ""
    echo "üåê PLATAFORMA GITOPS MULTI-CLUSTER - INTERFACES DE USUARIO"
    echo "=========================================================="
    echo ""
    echo "üìä GITOPS CORE:"
    echo "---------------"
    echo "üîÑ ArgoCD UI: http://localhost:8080"
    echo "   üìã Prop√≥sito: Continuous Deployment y gesti√≥n de aplicaciones GitOps"
    echo "   üîì Acceso: AN√ìNIMO - SIN LOGIN REQUERIDO"
    echo "   ${UI_STATUS["ArgoCD"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üö¢ Kargo UI: http://localhost:8081"
    echo "   üìã Prop√≥sito: Promociones autom√°ticas entre entornos (dev ‚Üí pre ‚Üí pro)"
    echo "   üîì Acceso: Credenciales fijas (admin/admin)"
    echo "   ${UI_STATUS["Kargo"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üîê ArgoCD Dex: http://localhost:8082"
    echo "   üìã Prop√≥sito: Authentication service para ArgoCD"
    echo "   üîì Acceso: Directo sin autenticaci√≥n"
    echo "   ${UI_STATUS["ArgoCD_Dex"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üö¢ PROGRESSIVE DELIVERY & EVENT-DRIVEN GITOPS:"
    echo "-----------------------------------------------"
    echo "‚ö° Argo Workflows UI: http://localhost:8083"
    echo "   üìã Prop√≥sito: Workflow orchestration y batch processing"
    echo "   üîì Acceso: AN√ìNIMO - SIN LOGIN REQUERIDO"
    echo "   ${UI_STATUS["Argo_Workflows"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üéØ Argo Rollouts Dashboard: http://localhost:8084"
    echo "   üìã Prop√≥sito: Progressive delivery, canary deployments y blue-green"
    echo "   üîì Acceso: AN√ìNIMO - SIN LOGIN REQUERIDO"
    echo "   ${UI_STATUS["Argo_Rollouts"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üì° Argo Events Webhook: http://localhost:8089"
    echo "   üìã Prop√≥sito: Event-driven GitOps automation y webhook processing"
    echo "   üîì Acceso: Webhooks API endpoint (sin UI web)"
    echo "   ${UI_STATUS["Argo_Events"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üîî Argo Notifications: Integrado en ArgoCD + Grafana annotations"
    echo "   üìã Prop√≥sito: GitOps deployment notifications y alerting"
    echo "   üîì Acceso: Notificaciones autom√°ticas (sin UI independiente)"
    echo "   üí° Ver notificaciones en: Grafana ‚Üí Annotations & Alerts"
    echo ""
    echo "üìà OBSERVABILITY:"
    echo "-----------------"
    echo "üìä Grafana UI: http://localhost:8085"
    echo "   üìã Prop√≥sito: Dashboards y visualizaci√≥n de m√©tricas"
    echo "   üîì Acceso: AN√ìNIMO - SIN LOGIN REQUERIDO"
    echo "   ${UI_STATUS["Grafana"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üìà Prometheus UI: http://localhost:8086"
    echo "   üìã Prop√≥sito: Metrics collection y time-series database"
    echo "   üîì Acceso: Directo sin autenticaci√≥n"
    echo "   ${UI_STATUS["Prometheus"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üö® AlertManager UI: http://localhost:8087"
    echo "   üìã Prop√≥sito: Alert routing y notification management"
    echo "   üîì Acceso: Directo sin autenticaci√≥n"
    echo "   ${UI_STATUS["AlertManager"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üîç Jaeger UI: http://localhost:8088"
    echo "   üìã Prop√≥sito: Distributed tracing y performance monitoring"
    echo "   üîì Acceso: Directo sin autenticaci√≥n"
    echo "   ${UI_STATUS["Jaeger"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üìù LOGS & STORAGE:"
    echo "------------------"
    echo "üìù Loki (Logs): Accesible v√≠a Grafana (puerto 8085)"
    echo "   üìã Prop√≥sito: Agregaci√≥n y consulta de logs con LogQL"
    echo "   üîì Acceso: Loki NO tiene UI web - se consulta desde Grafana"
    echo "   üí° Instrucciones: Ir a Grafana ‚Üí Explore ‚Üí Seleccionar Loki como datasource"
    echo ""
    echo "üè™ MinIO API: Puerto 9000 (solo API S3-compatible)"
    echo "   üìã Prop√≥sito: Object storage S3-compatible (solo API, sin UI web)"
    echo "   üîì Acceso: MinIO API NO tiene UI web - usar MinIO Console o clientes S3"
    echo "   üí° Instrucciones: Usar mc (MinIO Client) o SDK S3-compatible"
    echo ""
    echo "üè™ MinIO Console: http://localhost:8091"
    echo "   üìã Prop√≥sito: Object storage S3-compatible (Console Web UI)"
    echo "   üîì Acceso: admin/admin123"
    echo "   ${UI_STATUS["MinIO_Console"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üîß DESARROLLO & GESTI√ìN:"
    echo "------------------------"
    echo "üêô Gitea UI: http://localhost:8092"
    echo "   üìã Prop√≥sito: Git repository management y source control"
    echo "   üîì Acceso: AN√ìNIMO - SIN LOGIN REQUERIDO"
    echo "   ${UI_STATUS["Gitea"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    echo "üîß Kubernetes Dashboard: http://localhost:8093"
    echo "   üìã Prop√≥sito: Kubernetes cluster management interface"
    echo "   üîì Acceso: AN√ìNIMO - SIN LOGIN REQUERIDO"
    echo "   ${UI_STATUS["K8s_Dashboard"]:-"‚è≥ VERIFICANDO..."}"
    echo ""
    
    echo "üèóÔ∏è ARQUITECTURA DEL SISTEMA:"
    echo "=============================="
    echo "üèóÔ∏è ARQUITECTURA MULTI-CLUSTER:"
    echo "=============================="
    echo "üè≠ Cluster gitops-dev: Herramientas de gesti√≥n y control centralizadas"
    echo "üè≠ Cluster gitops-pre: Entorno de preproducci√≥n para validaci√≥n"
    echo "üè≠ Cluster gitops-pro: Entorno de producci√≥n empresarial"
    echo "üìä Stack: ArgoCD + Kargo + Observabilidad + Gesti√≥n Multi-Entorno"
    echo ""
    echo "üì¶ Herramientas en DEV (controlan todos los clusters):"
    echo "- ArgoCD + ApplicationSet: Gesti√≥n de aplicaciones multi-cluster"
    echo "- Kargo: Promociones autom√°ticas entre entornos"
    echo "- Argo Events + Notifications: Event-driven automation"
    echo "- Prometheus/Grafana: Monitoreo centralizado multi-cluster"
    echo "- Gitea, MinIO, Jaeger, Loki: Infraestructura compartida"
    echo "- Demo-project: Desplegado en los 3 entornos para pruebas"
    echo ""
    echo "üîÑ Flujo GitOps: Git ‚Üí ArgoCD+ApplicationSet ‚Üí Deploy multi-cluster ‚Üí Events ‚Üí Kargo ‚Üí Promote ‚Üí Notifications"
    echo ""
    
    echo "üí° COMANDOS √öTILES POST-INSTALACI√ìN:"
    echo "===================================="
    echo "üí° Ver diagn√≥stico completo: ./scripts/diagnostico-gitops.sh"
    echo "üí° Reiniciar port-forwards: ./scripts/setup-port-forwards.sh"
    echo "üí° Ver aplicaciones ArgoCD: kubectl get applications -n argocd"
    echo "üí° Port-forwards activos PID: $PORTFORWARD_PID"
    echo ""
    echo "üöÄ ¬°PLATAFORMA GITOPS MULTI-CLUSTER COMPLETAMENTE OPERATIVA!"
    echo "üîì ¬°TODAS LAS UIS WEB VALIDADAS PARA ACCESO SIN AUTENTICACI√ìN!"
    echo "üìù ¬°LOGS DE LOKI DISPONIBLES A TRAV√âS DE GRAFANA!"
}

esperar_servicios() {
    echo -e "${BLUE}‚è≥ Esperando a que todos los servicios est√©n listos...${NC}"
    
    kubectl config use-context "$CLUSTER_DEV"
    
    # Esperar namespaces cr√≠ticos con timeouts m√°s largos
    local namespaces=("argocd" "monitoring" "loki" "jaeger" "minio" "gitea" "argo-rollouts" "argo-workflows" "argo-events" "kubernetes-dashboard" "kargo")
    
    for ns in "${namespaces[@]}"; do
        echo "üì¶ Esperando namespace: $ns"
        if kubectl get namespace "$ns" >/dev/null 2>&1; then
            # Solo esperar pods que existan, con timeout m√°s corto por namespace
            kubectl wait --for=condition=Ready pods --all -n "$ns" --timeout=180s 2>/dev/null || echo "‚ö†Ô∏è Algunos pods en $ns pueden tardar m√°s en estar listos"
        else
            echo "‚ö†Ô∏è Namespace $ns no existe a√∫n"
        fi
    done
    
    # Esperar expl√≠citamente a servicios cr√≠ticos con verificaci√≥n mejorada
    echo "üîç Verificando servicios cr√≠ticos..."
    local servicios_criticos=("argocd-server" "prometheus-stack-grafana" "jaeger-query" "minio" "gitea-http")
    local servicios_disponibles=0
    
    for servicio in "${servicios_criticos[@]}"; do
        if kubectl get svc "$servicio" -A >/dev/null 2>&1; then
            servicios_disponibles=$((servicios_disponibles + 1))
            echo "‚úÖ Servicio $servicio disponible"
        else
            echo "‚ö†Ô∏è Servicio $servicio no encontrado"
        fi
    done
    
    # Esperar tiempo adicional para que todos los servicios est√©n completamente listos
    echo "‚è≥ Tiempo adicional para estabilizaci√≥n de servicios..."
    sleep 60
    
    echo -e "${GREEN}‚úÖ Servicios inicializados: $servicios_disponibles/${#servicios_criticos[@]} cr√≠ticos disponibles${NC}"
}

instalar_todo() {
    # Configurar trap para limpieza en caso de error
    trap 'echo -e "${RED}‚ùå Error durante la instalaci√≥n. Limpiando...${NC}"; limpiar_en_error; exit 1' ERR
    
    # Asegurar instalaci√≥n completamente desatendida
    export DEBIAN_FRONTEND=noninteractive
    export NEEDRESTART_MODE=a
    export APT_LISTCHANGES_FRONTEND=none
    
    local inicio=$(date +%s)
    
    mostrar_banner
    mostrar_arquitectura
    
    echo -e "${BLUE}üöÄ Iniciando instalaci√≥n completa optimizada...${NC}"
    echo -e "${GREEN}‚úÖ MODO DESATENDIDO: Sin confirmaciones interactivas${NC}"
    
    # Fase 1: Verificaciones previas
    echo -e "${PURPLE}[FASE 1/8]${NC} Verificaciones del sistema"
    verificar_dependencias
    
    # Fase 2: Preparaci√≥n del entorno (sin limpieza redundante)
    echo -e "${PURPLE}[FASE 2/8]${NC} Preparaci√≥n del entorno"
    echo "‚úÖ Entorno ya limpio - continuando con creaci√≥n de clusters"
    
    # Fase 3: Creaci√≥n de clusters
    echo -e "${PURPLE}[FASE 3/8]${NC} Creaci√≥n de clusters"
    if ! crear_clusters; then
        echo -e "${RED}‚ùå Error en la creaci√≥n de clusters${NC}"
        exit 1
    fi
    
    # Fase 4: Configuraci√≥n de contextos
    echo -e "${PURPLE}[FASE 4/8]${NC} Configuraci√≥n de contextos"
    configurar_contextos
    
    # Fase 5: Instalaci√≥n de ArgoCD
    echo -e "${PURPLE}[FASE 5/8]${NC} Instalaci√≥n de ArgoCD"
    if ! instalar_argocd; then
        echo -e "${RED}‚ùå Error en la instalaci√≥n de ArgoCD${NC}"
        exit 1
    fi
    
    # Fase 6: Aplicaci√≥n de infraestructura
    echo -e "${PURPLE}[FASE 6/10]${NC} Despliegue de infraestructura GitOps"
    if ! aplicar_infraestructura; then
        echo -e "${RED}‚ùå Error en la aplicaci√≥n de infraestructura${NC}"
        exit 1
    fi
    
    # Fase 7: Configuraci√≥n inicial de ArgoCD
    echo -e "${PURPLE}[FASE 7/10]${NC} Configuraci√≥n inicial de ArgoCD"
    echo "‚öôÔ∏è ArgoCD configurado para cluster DEV (clusters adicionales se agregar√°n despu√©s)"
    
    # Fase 8: Esperar servicios y configurar acceso DEV
    echo -e "${PURPLE}[FASE 8/10]${NC} Finalizaci√≥n y configuraci√≥n de acceso DEV"
    esperar_servicios
    verificar_y_arreglar_servicios
    configurar_port_forwards
    
    # VALIDACI√ìN ESTRICTA: Verificar si DEV est√° completamente funcional antes de crear PRE y PRO
    echo -e "${PURPLE}[VALIDACI√ìN CR√çTICA]${NC} Verificando estado completo de DEV"
    
    if validar_dev_completo; then
        echo -e "${GREEN}‚úÖ VALIDACI√ìN EXITOSA: DEV completamente funcional${NC}"
        echo -e "${GREEN}üöÄ Procediendo a crear clusters PRE y PRO${NC}"
        
        # Fase 9: Crear clusters adicionales
        echo -e "${PURPLE}[FASE 9/10]${NC} Creaci√≥n de clusters PRE y PRO"
        crear_clusters_adicionales
        
        # Fase 10: Configuraci√≥n multi-cluster completa
        echo -e "${PURPLE}[FASE 10/10]${NC} Configuraci√≥n multi-cluster completa"
        configurar_multi_cluster
        
        echo -e "${GREEN}‚úÖ Arquitectura multi-cluster completa${NC}"
        local clusters_texto="3 Clusters creados y configurados"
    else
        echo -e "${RED}‚ùå VALIDACI√ìN FALLIDA: DEV no est√° completamente funcional${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è PRE y PRO no ser√°n creados por problemas en DEV${NC}"
        echo -e "${YELLOW}üí° Soluciona los problemas de DEV y ejecuta: $0 clusters${NC}"
        local clusters_texto="1 Cluster DEV creado (PRE/PRO pendientes por errores)"
    fi
    
    # Calcular tiempo total
    local fin=$(date +%s)
    local duracion=$((fin - inicio))
    local minutos=$((duracion / 60))
    local segundos=$((duracion % 60))
    
    echo -e "${GREEN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                          üéâ ¬°INSTALACI√ìN COMPLETADA! üéâ                     ‚ïë"  
    echo "‚ïë                                                                              ‚ïë"
    echo "‚ïë  ‚è±Ô∏è  Tiempo total: ${minutos}m ${segundos}s                                                    ‚ïë"
    echo "‚ïë  üè≠ $clusters_texto"
    echo "‚ïë  üì¶ 17+ Herramientas GitOps desplegadas                                     ‚ïë"
    echo "‚ïë  üåê 12 UIs web disponibles + Logs via Grafana + Notifications             ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    mostrar_urls_ui
}

# Funci√≥n de limpieza en caso de error
limpiar_en_error() {
    echo -e "${YELLOW}üßπ Realizando limpieza de emergencia...${NC}"
    
    # Matar port-forwards
    pkill -f "kubectl.*port-forward" 2>/dev/null || true
    
    # Mostrar estado de clusters para debug
    echo "üìä Estado de clusters al momento del error:"
    minikube status -p "$CLUSTER_DEV" 2>/dev/null || echo "‚ùå Cluster DEV no disponible"
    minikube status -p "$CLUSTER_PRE" 2>/dev/null || echo "‚ùå Cluster PRE no disponible" 
    minikube status -p "$CLUSTER_PRO" 2>/dev/null || echo "‚ùå Cluster PRO no disponible"
    
    echo -e "${YELLOW}üí° Para limpiar completamente, ejecuta: $0 limpiar${NC}"
}

# Funciones para ejecuci√≥n individual
limpiar() {
    echo -e "${YELLOW}üßπ Limpiando entorno completo...${NC}"
    
    # Matar todos los port-forwards
    echo "üîå Cerrando port-forwards activos..."
    if pgrep -f "kubectl.*port-forward" >/dev/null 2>&1; then
        local pf_count=$(pgrep -cf "kubectl.*port-forward" 2>/dev/null || echo "0")
        pkill -f "kubectl.*port-forward" 2>/dev/null || true
        echo -e "${GREEN}‚úÖ $pf_count port-forwards cerrados${NC}"
    else
        echo "‚ÑπÔ∏è No hay port-forwards activos"
    fi
    
    # Limpiar clusters
    limpiar_clusters_existentes
    
    # Limpiar configuraciones de kubectl
    echo "üóëÔ∏è Limpiando contextos de kubectl..."
    local contextos_eliminados=0
    for cluster in "$CLUSTER_DEV" "$CLUSTER_PRE" "$CLUSTER_PRO"; do
        if kubectl config get-contexts -o name | grep -q "^$cluster$" 2>/dev/null; then
            if kubectl config delete-context "$cluster" >/dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ Contexto $cluster eliminado${NC}"
                contextos_eliminados=$((contextos_eliminados + 1))
            fi
        fi
    done
    
    if [ $contextos_eliminados -eq 0 ]; then
        echo "‚ÑπÔ∏è No hab√≠a contextos de kubectl que eliminar"
    fi
    
    # Limpiar archivos temporales
    echo "üóëÔ∏è Limpiando archivos temporales..."
    local archivos_temp=("/tmp/yq")
    local archivos_eliminados=0
    
    for archivo in "${archivos_temp[@]}"; do
        if [ -f "$archivo" ]; then
            sudo rm -f "$archivo" 2>/dev/null && archivos_eliminados=$((archivos_eliminados + 1))
        fi
    done
    
    if [ $archivos_eliminados -gt 0 ]; then
        echo -e "${GREEN}‚úÖ $archivos_eliminados archivos temporales eliminados${NC}"
    else
        echo "‚ÑπÔ∏è No hab√≠a archivos temporales que eliminar"
    fi
    
    echo ""
    echo -e "${GREEN}üéâ Limpieza completa realizada exitosamente${NC}"
    echo "üí° El entorno est√° listo para una instalaci√≥n limpia con: $0"
}

solo_clusters() {
    echo -e "${BLUE}üè≠ Creando solo clusters...${NC}"
    verificar_dependencias
    crear_clusters
    configurar_contextos
    echo -e "${GREEN}‚úÖ Clusters creados y configurados${NC}"
}

solo_argocd() {
    echo -e "${BLUE}üîÑ Instalando solo ArgoCD...${NC}" 
    kubectl config use-context "$CLUSTER_DEV" || {
        echo -e "${RED}‚ùå Cluster DEV no disponible. Ejecuta primero: $0 clusters${NC}"
        exit 1
    }
    instalar_argocd
    echo -e "${GREEN}‚úÖ ArgoCD instalado${NC}"
}

solo_infraestructura() {
    echo -e "${BLUE}üì¶ Aplicando solo infraestructura...${NC}"
    kubectl config use-context "$CLUSTER_DEV" || {
        echo -e "${RED}‚ùå Cluster DEV no disponible. Ejecuta primero: $0 clusters${NC}"
        exit 1
    }
    aplicar_infraestructura
    echo -e "${GREEN}‚úÖ Infraestructura aplicada${NC}"
}

solo_port_forwards() {
    echo -e "${BLUE}üåê Configurando solo port-forwards...${NC}"
    kubectl config use-context "$CLUSTER_DEV" || {
        echo -e "${RED}‚ùå Cluster DEV no disponible${NC}"
        exit 1
    }
    configurar_port_forwards
    echo -e "${GREEN}‚úÖ Port-forwards configurados${NC}"
}

sincronizar_aplicaciones() {
    echo -e "${BLUE}üîÑ Sincronizando aplicaciones ArgoCD...${NC}"
    kubectl config use-context "$CLUSTER_DEV" || {
        echo -e "${RED}‚ùå Cluster DEV no disponible${NC}"
        exit 1
    }
    
    # Mostrar estado actual
    echo "üìä Estado actual de aplicaciones:"
    kubectl get applications -n argocd -o wide
    
    # Obtener aplicaciones pendientes
    local apps_pendientes=$(kubectl get applications -n argocd --no-headers | grep -E "(Unknown|OutOfSync)" | awk '{print $1}' || true)
    
    if [[ -n "$apps_pendientes" ]]; then
        echo -e "${YELLOW}üìã Aplicaciones pendientes de sincronizaci√≥n:${NC}"
        echo "$apps_pendientes"
        echo ""
        
        for app in $apps_pendientes; do
            echo "üîÑ Configurando auto-sync para: $app"
            kubectl patch application "$app" -n argocd --type merge -p '{
                "spec": {
                    "syncPolicy": {
                        "automated": {
                            "prune": true,
                            "selfHeal": true
                        }
                    }
                }
            }' || echo "‚ö†Ô∏è Error al habilitar auto-sync para $app"
            
            echo "üîÑ Forzando sincronizaci√≥n inicial de: $app"
            kubectl patch application "$app" -n argocd --type merge -p '{
                "operation": {
                    "sync": {}
                }
            }' || echo "‚ö†Ô∏è Error al sincronizar $app"
        done
        
        echo "‚è≥ Esperando 45s para que las aplicaciones se sincronicen..."
        sleep 45
        
        # Mostrar estado final
        echo "üìä Estado despu√©s de sincronizaci√≥n:"
        kubectl get applications -n argocd -o wide
        
    else
        echo -e "${GREEN}‚úÖ Todas las aplicaciones ya est√°n sincronizadas${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Sincronizaci√≥n completada${NC}"
}

mostrar_estado() {
    echo -e "${BLUE}üìä Estado actual del sistema:${NC}"
    echo ""
    
    # Estado de clusters
    echo "üè≠ CLUSTERS:"
    for cluster in "$CLUSTER_DEV" "$CLUSTER_PRE" "$CLUSTER_PRO"; do
        if minikube status -p "$cluster" >&/dev/null; then
            echo -e "  ‚úÖ $cluster: $(minikube status -p "$cluster" | grep host | awk '{print $2}')"
        else
            echo -e "  ‚ùå $cluster: No disponible"
        fi
    done
    
    echo ""
    echo "üåê PORT-FORWARDS ACTIVOS:"
    if pgrep -f "kubectl.*port-forward" >/dev/null; then
        netstat -tuln | grep -E ':(808[0-3]|809[0-3])' | while read line; do
            puerto=$(echo "$line" | awk '{print $4}' | cut -d: -f2)
            echo "  üîó Puerto $puerto activo"
        done
    else
        echo "  ‚ùå No hay port-forwards activos"
    fi
    
    echo ""
    echo "üì¶ APLICACIONES ARGOCD:"
    if kubectl config use-context "$CLUSTER_DEV" >&/dev/null; then
        kubectl get applications -n argocd 2>/dev/null | head -10 || echo "  ‚ùå ArgoCD no disponible"
    else
        echo "  ‚ùå Cluster DEV no disponible"
    fi
}

mostrar_help() {
    echo -e "${CYAN}üîß GitOps Multi-Cluster Infrastructure - Modo de uso:${NC}"
    echo ""
    echo "üìñ COMANDOS DISPONIBLES:"
    echo "  $0                    # Instalaci√≥n completa (recomendado)"
    echo "  $0 limpiar            # Limpiar todo el entorno"
    echo "  $0 clusters           # Crear solo los clusters"
    echo "  $0 argocd             # Instalar solo ArgoCD"
    echo "  $0 infra              # Aplicar solo infraestructura"
    echo "  $0 sync               # Sincronizar aplicaciones ArgoCD"
    echo "  $0 port-forwards      # Configurar solo port-forwards"
    echo "  $0 urls               # Mostrar URLs de interfaces"
    echo "  $0 estado             # Mostrar estado actual"
    echo "  $0 help               # Mostrar esta ayuda"
    echo ""
    echo "üöÄ INSTALACI√ìN RECOMENDADA:"
    echo "  1. $0                 # Instalaci√≥n completa autom√°tica"
    echo ""
    echo "üîß INSTALACI√ìN PASO A PASO:"
    echo "  1. $0 clusters        # Crear clusters"
    echo "  2. $0 argocd          # Instalar ArgoCD"
    echo "  3. $0 infra           # Aplicar infraestructura"
    echo "  4. $0 sync            # Sincronizar aplicaciones"
    echo "  5. $0 port-forwards   # Configurar acceso"
}

# Manejo de argumentos
case "${1:-}" in
    "limpiar"|"clean")
        limpiar
        ;;
    "clusters")
        solo_clusters
        ;;
    "argocd")
        solo_argocd
        ;;
    "infra"|"infraestructura")
        solo_infraestructura
        ;;
    "sync"|"sincronizar")
        sincronizar_aplicaciones
        ;;
    "port-forwards"|"pf")
        solo_port_forwards
        ;;
    "urls"|"ui")
        mostrar_urls_ui
        ;;
    "estado"|"status")
        mostrar_estado
        ;;
    "help"|"ayuda"|"-h"|"--help")
        mostrar_help
        ;;
    "")
        # Instalaci√≥n completa por defecto
        instalar_todo
        ;;
    *)
        echo -e "${RED}‚ùå Argumento desconocido: $1${NC}"
        echo ""
        mostrar_help
        exit 1
        ;;
esac
