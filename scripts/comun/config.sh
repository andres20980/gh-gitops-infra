#!/bin/bash

# ============================================================================
# M√ìDULO DE CONFIGURACI√ìN - Configuraci√≥n centralizada del sistema GitOps
# ============================================================================
# Gestiona todas las variables de configuraci√≥n del sistema de forma centralizada
# Usado por todos los m√≥dulos del sistema para evitar duplicaci√≥n
# ============================================================================

# Evitar redefinici√≥n si ya est√° cargado
if [[ -z "${GITOPS_CONFIG_LOADED:-}" ]]; then
    readonly GITOPS_CONFIG_LOADED="true"

    # ============================================================================
    # CONFIGURACI√ìN DEL PROYECTO
    # ============================================================================
    
    # Metadatos del proyecto
    readonly GITOPS_VERSION="3.0.0"
    readonly GITOPS_NAME="GitOps Espa√±a Infrastructure"
    readonly GITOPS_DESCRIPTION="Instalador modular para infraestructura GitOps"
    
    # Directorios del proyecto (se configuran autom√°ticamente)
    if [[ -z "${PROJECT_ROOT:-}" ]]; then
        if [[ -f "instalar.sh" ]]; then
            # Ejecut√°ndose desde el directorio ra√≠z
            readonly PROJECT_ROOT="$(pwd)"
        else
            # Ejecut√°ndose desde subdirectorio
            readonly PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
        fi
    fi
    
    readonly SCRIPTS_DIR="${PROJECT_ROOT}/scripts"
    readonly COMUN_DIR="${SCRIPTS_DIR}/comun"
    readonly FASES_DIR="${SCRIPTS_DIR}/fases"
    readonly LOGS_DIR="${PROJECT_ROOT}/logs"
    
    # ============================================================================
    # CONFIGURACI√ìN DE CLUSTERS
    # ============================================================================
    
    # Cluster de desarrollo (capacidad completa)
    readonly CLUSTER_DEV_NAME="${CLUSTER_DEV_NAME:-gitops-dev}"
    readonly CLUSTER_DEV_CPUS="${CLUSTER_DEV_CPUS:-4}"
    readonly CLUSTER_DEV_MEMORY="${CLUSTER_DEV_MEMORY:-8192}"
    readonly CLUSTER_DEV_DISK="${CLUSTER_DEV_DISK:-40g}"
    
    # Cluster de preproducci√≥n (capacidad media)
    readonly CLUSTER_PRE_NAME="${CLUSTER_PRE_NAME:-gitops-pre}"
    readonly CLUSTER_PRE_CPUS="${CLUSTER_PRE_CPUS:-2}"
    readonly CLUSTER_PRE_MEMORY="${CLUSTER_PRE_MEMORY:-4096}"
    readonly CLUSTER_PRE_DISK="${CLUSTER_PRE_DISK:-20g}"
    
    # Cluster de producci√≥n (capacidad media)
    readonly CLUSTER_PRO_NAME="${CLUSTER_PRO_NAME:-gitops-pro}"
    readonly CLUSTER_PRO_CPUS="${CLUSTER_PRO_CPUS:-2}"
    readonly CLUSTER_PRO_MEMORY="${CLUSTER_PRO_MEMORY:-4096}"
    readonly CLUSTER_PRO_DISK="${CLUSTER_PRO_DISK:-20g}"
    
    # Proveedor de clusters
    readonly CLUSTER_PROVIDER="${CLUSTER_PROVIDER:-minikube}"
    
    # ============================================================================
    # CONFIGURACI√ìN DE ARGOCD
    # ============================================================================
    
    readonly ARGOCD_NAMESPACE="${ARGOCD_NAMESPACE:-argocd}"
    readonly ARGOCD_VERSION="${ARGOCD_VERSION:-stable}"
    readonly ARGOCD_ADMIN_USER="${ARGOCD_ADMIN_USER:-admin}"
    
    # ============================================================================
    # CONFIGURACI√ìN DE LOGGING
    # ============================================================================
    
    # Crear directorio de logs si no existe
    mkdir -p "$LOGS_DIR" 2>/dev/null || true
    
    # Configuraci√≥n de logging por defecto
    readonly DEFAULT_LOG_LEVEL="${LOG_LEVEL:-INFO}"
    readonly DEFAULT_LOG_FILE="${LOG_FILE:-${LOGS_DIR}/instalador-$(date +%Y%m%d-%H%M%S).log}"
    
    # ============================================================================
    # CONFIGURACI√ìN DE COMPORTAMIENTO
    # ============================================================================
    
    # Comportamiento por defecto
    readonly DEFAULT_DRY_RUN="${DRY_RUN:-false}"
    readonly DEFAULT_VERBOSE="${VERBOSE:-false}"
    readonly DEFAULT_DEBUG="${DEBUG:-false}"
    readonly DEFAULT_SKIP_DEPS="${SKIP_DEPS:-false}"
    readonly DEFAULT_SOLO_DEV="${SOLO_DEV:-false}"
    readonly DEFAULT_TIMEOUT="${TIMEOUT_INSTALL:-600}"
    
    # ============================================================================
    # CONFIGURACI√ìN DE FASES
    # ============================================================================
    
    # Lista de fases disponibles (orden de ejecuci√≥n)
    readonly FASES_DISPONIBLES=(
        "fase-01-permisos.sh"
        "fase-02-dependencias.sh"
        "fase-03-clusters.sh"
        "fase-04-argocd.sh"
        "fase-05-herramientas.sh"
        "fase-06-aplicaciones.sh"
        "fase-07-finalizacion.sh"
    )
    
    # Mapeo de nombres de fases a n√∫meros
    readonly -A FASE_NOMBRES=(
        ["01"]="Gesti√≥n de Permisos"
        ["02"]="Dependencias del Sistema"
        ["03"]="Docker y Clusters"
        ["04"]="Instalaci√≥n ArgoCD"
        ["05"]="Herramientas GitOps"
        ["06"]="Aplicaciones Custom"
        ["07"]="Finalizaci√≥n y Accesos"
    )
    
    # ============================================================================
    # FUNCIONES DE CONFIGURACI√ìN
    # ============================================================================
    
    # Inicializar configuraci√≥n con valores por defecto
    inicializar_configuracion() {
        # Solo configurar si no est√°n ya definidas
        export DRY_RUN="${DRY_RUN:-$DEFAULT_DRY_RUN}"
        export VERBOSE="${VERBOSE:-$DEFAULT_VERBOSE}"
        export DEBUG="${DEBUG:-$DEFAULT_DEBUG}"
        export SKIP_DEPS="${SKIP_DEPS:-$DEFAULT_SKIP_DEPS}"
        export SOLO_DEV="${SOLO_DEV:-$DEFAULT_SOLO_DEV}"
        export TIMEOUT_INSTALL="${TIMEOUT_INSTALL:-$DEFAULT_TIMEOUT}"
        export LOG_LEVEL="${LOG_LEVEL:-$DEFAULT_LOG_LEVEL}"
        export LOG_FILE="${LOG_FILE:-$DEFAULT_LOG_FILE}"
        
        # Configurar debug autom√°ticamente si est√° habilitado
        if [[ "$DEBUG" == "true" ]]; then
            export VERBOSE="true"
            export LOG_LEVEL="DEBUG"
            set -x
        fi
        
        # Configurar verbose autom√°ticamente si est√° habilitado
        if [[ "$VERBOSE" == "true" ]]; then
            export LOG_LEVEL="DEBUG"
            export SHOW_TIMESTAMP="true"
        fi
    }
    
    # Validar configuraci√≥n
    validar_configuracion() {
        # Validar directorios
        if [[ ! -d "$SCRIPTS_DIR" ]]; then
            echo "‚ùå Error: Directorio de scripts no encontrado: $SCRIPTS_DIR" >&2
            return 1
        fi
        
        if [[ ! -d "$FASES_DIR" ]]; then
            echo "‚ùå Error: Directorio de fases no encontrado: $FASES_DIR" >&2
            return 1
        fi
        
        # Validar fases
        for fase in "${FASES_DISPONIBLES[@]}"; do
            if [[ ! -f "$FASES_DIR/$fase" ]]; then
                echo "‚ùå Error: Fase no encontrada: $FASES_DIR/$fase" >&2
                return 1
            fi
        done
        
        return 0
    }
    
    # Obtener informaci√≥n de configuraci√≥n
    obtener_info_configuracion() {
        cat << EOF
üìã Configuraci√≥n GitOps Espa√±a v${GITOPS_VERSION}
‚îú‚îÄ Proyecto: $PROJECT_ROOT
‚îú‚îÄ Scripts: $SCRIPTS_DIR
‚îú‚îÄ Fases: ${#FASES_DISPONIBLES[@]} m√≥dulos
‚îú‚îÄ Logs: $LOGS_DIR
‚îú‚îÄ Dry-run: $DRY_RUN
‚îú‚îÄ Verbose: $VERBOSE
‚îú‚îÄ Debug: $DEBUG
‚îú‚îÄ Skip deps: $SKIP_DEPS
‚îú‚îÄ Solo DEV: $SOLO_DEV
‚îî‚îÄ Log file: $LOG_FILE
EOF
    }

fi
