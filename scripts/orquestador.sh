#!/bin/bash

# ============================================================================
# ORQUESTADOR PRINCIPAL - Coordinaci√≥n de instalaci√≥n GitOps
# ============================================================================
# Coordina la ejecuci√≥n de todas las fases de instalaci√≥n GitOps de forma
# modular y ordenada
# ============================================================================

set -euo pipefail

# ============================================================================
# CONFIGURACI√ìN GLOBAL
# ============================================================================

# Evitar redefinici√≥n de variables si ya est√°n cargadas desde orquestador
if [[ -z "${GITOPS_ORQUESTADOR_LOADED:-}" ]]; then
    readonly GITOPS_ORQUESTADOR_LOADED="true"
    readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    readonly SCRIPTS_ROOT="$SCRIPT_DIR"
fi

# Cargar m√≥dulos comunes
# shellcheck source=comun/base.sh
source "$SCRIPTS_ROOT/comun/base.sh"
# shellcheck source=comun/validacion.sh
source "$SCRIPTS_ROOT/comun/validacion.sh"
# shellcheck source=instalacion/dependencias.sh
source "$SCRIPTS_ROOT/instalacion/dependencias.sh"
# shellcheck source=cluster/gestor.sh
source "$SCRIPTS_ROOT/cluster/gestor.sh"

# ============================================================================
# DEFINICI√ìN DE FASES
# ============================================================================

readonly FASE_VALIDACION="validacion"
readonly FASE_DEPENDENCIAS="dependencias"
readonly FASE_CLUSTER="cluster"
readonly FASE_GITOPS="gitops"
readonly FASE_COMPONENTES="componentes"
readonly FASE_VERIFICACION="verificacion"

# Variables globales de configuraci√≥n
MODO_INSTALACION="${MODO_INSTALACION:-normal}"
CLUSTER_NAME="${CLUSTER_NAME:-gitops-dev}"
CLUSTER_PROVIDER="${CLUSTER_PROVIDER:-minikube}"
CREATE_CLUSTER="${CREATE_CLUSTER:-true}"
DRY_RUN="${DRY_RUN:-false}"
VERBOSE="${VERBOSE:-false}"
DEBUG="${DEBUG:-false}"
INTERACTIVE="${INTERACTIVE:-true}"
LOG_LEVEL="${LOG_LEVEL:-INFO}"

# ============================================================================
# GESTI√ìN DE FASES
# ============================================================================

ejecutar_fase_validacion() {
    log_section "üîç Fase 1: Validaci√≥n de Prerequisitos"
    
    local start_time
    start_time=$(date +%s)
    
    # Validar prerequisitos del sistema
    if ! validar_prerequisitos; then
        log_error "‚ùå Fall√≥ la validaci√≥n de prerequisitos"
        return 1
    fi
    
    # Validar entorno GitOps
    if ! validar_entorno_gitops; then
        log_warning "‚ö†Ô∏è Entorno GitOps incompleto, pero continuando..."
    fi
    
    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    log_success "‚úÖ Fase completada: validacion (${duration}s)"
    return 0
}

ejecutar_fase_dependencias() {
    log_section "üì¶ Fase 2: Instalaci√≥n de Dependencias"
    
    local start_time
    start_time=$(date +%s)
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "üîç [DRY-RUN] Se instalar√≠an las dependencias del sistema"
        return 0
    fi
    
    if ! instalar_dependencias; then
        log_error "‚ùå Fall√≥ la instalaci√≥n de dependencias"
        return 1
    fi
    
    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    log_success "‚úÖ Fase completada: dependencias (${duration}s)"
    return 0
}

ejecutar_fase_cluster() {
    log_section "üéØ Fase 3: Configuraci√≥n del Cluster Principal ($CLUSTER_NAME)"
    
    local start_time
    start_time=$(date +%s)
    
    if [[ "$CREATE_CLUSTER" != "true" ]]; then
        log_info "‚è≠Ô∏è Creaci√≥n de cluster deshabilitada"
        
        # Solo validar cluster existente
        if ! validar_cluster; then
            log_error "‚ùå Cluster existente no v√°lido"
            return 1
        fi
        
        log_success "‚úÖ Cluster existente validado"
        return 0
    fi
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "üîç [DRY-RUN] Se crear√≠a cluster $CLUSTER_PROVIDER: $CLUSTER_NAME"
        return 0
    fi
    
    log_info "Creando cluster principal $CLUSTER_NAME..."
    
    if ! configurar_cluster "$CLUSTER_NAME" "$CLUSTER_PROVIDER" "create"; then
        log_error "‚ùå Fall√≥ la configuraci√≥n del cluster"
        return 1
    fi
    
    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    log_success "‚úÖ Fase completada: cluster (${duration}s)"
    return 0
}

ejecutar_fase_gitops() {
    log_section "üöÄ Fase 4: Instalaci√≥n de Herramientas GitOps"
    
    local start_time
    start_time=$(date +%s)
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "üîç [DRY-RUN] Se instalar√≠an las herramientas GitOps (ArgoCD, etc.)"
        return 0
    fi
    
    # Aqu√≠ se integrar√≠a con el m√≥dulo de GitOps
    log_info "üîß Instalando ArgoCD..."
    log_info "üîß Configurando repositorios Git..."
    log_info "üîß Instalando Kargo..."
    
    # Placeholder - se implementar√° con m√≥dulos espec√≠ficos
    log_warning "‚ö†Ô∏è Fase GitOps en desarrollo - implementaci√≥n pendiente"
    
    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    log_success "‚úÖ Fase completada: gitops (${duration}s)"
    return 0
}

ejecutar_fase_componentes() {
    log_section "üîß Fase 5: Instalaci√≥n de Componentes Adicionales"
    
    local start_time
    start_time=$(date +%s)
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "üîç [DRY-RUN] Se instalar√≠an componentes adicionales (Prometheus, Grafana, etc.)"
        return 0
    fi
    
    # Aqu√≠ se integrar√≠a con el m√≥dulo de componentes
    log_info "üìä Instalando stack de monitorizaci√≥n..."
    log_info "üîí Configurando External Secrets..."
    log_info "üåê Configurando Ingress..."
    
    # Placeholder - se implementar√° con m√≥dulos espec√≠ficos
    log_warning "‚ö†Ô∏è Fase componentes en desarrollo - implementaci√≥n pendiente"
    
    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    log_success "‚úÖ Fase completada: componentes (${duration}s)"
    return 0
}

ejecutar_fase_verificacion() {
    log_section "‚úÖ Fase 6: Verificaci√≥n Final"
    
    local start_time
    start_time=$(date +%s)
    
    # Verificar cluster
    if ! validar_cluster; then
        log_error "‚ùå Cluster no est√° funcionando correctamente"
        return 1
    fi
    
    # Verificar herramientas instaladas
    log_info "üîç Verificando herramientas instaladas..."
    
    local herramientas=("kubectl" "helm" "docker")
    for herramienta in "${herramientas[@]}"; do
        if comando_existe "$herramienta"; then
            log_success "‚úÖ $herramienta disponible"
        else
            log_warning "‚ö†Ô∏è $herramienta no disponible"
        fi
    done
    
    # Mostrar informaci√≥n del cluster
    log_info "üìä Estado del cluster:"
    kubectl get nodes 2>/dev/null | head -5 || log_warning "No se pudo obtener informaci√≥n de nodos"
    
    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    log_success "‚úÖ Fase completada: verificacion (${duration}s)"
    return 0
}

# ============================================================================
# GESTI√ìN DE ERRORES Y LIMPIEZA
# ============================================================================

limpiar_en_error() {
    local fase_fallida="$1"
    
    log_warning "‚ö†Ô∏è Ejecutando limpieza autom√°tica tras error en fase: $fase_fallida"
    
    case "$fase_fallida" in
        "cluster")
            if [[ "$CREATE_CLUSTER" == "true" && "$CLUSTER_PROVIDER" == "minikube" ]]; then
                log_info "Limpiando cluster minikube fallido..."
                minikube delete -p "$CLUSTER_NAME" 2>/dev/null || true
            fi
            ;;
        "gitops"|"componentes")
            log_info "Limpieza de recursos Kubernetes..."
            # Aqu√≠ se agregar√≠an comandos espec√≠ficos de limpieza
            ;;
    esac
}

# ============================================================================
# ORQUESTADOR PRINCIPAL
# ============================================================================

ejecutar_orquestacion() {
    local modo="${1:-normal}"
    local fases_a_ejecutar=()
    
    # Configurar modo de instalaci√≥n
    MODO_INSTALACION="$modo"
    
    # Definir fases seg√∫n el modo
    case "$modo" in
        "dependencies"|"desde-cero")
            fases_a_ejecutar=(
                "$FASE_VALIDACION"
                "$FASE_DEPENDENCIAS"
                "$FASE_CLUSTER"
                "$FASE_GITOPS"
                "$FASE_COMPONENTES"
                "$FASE_VERIFICACION"
            )
            ;;
        "solo-cluster")
            fases_a_ejecutar=(
                "$FASE_VALIDACION"
                "$FASE_CLUSTER"
                "$FASE_VERIFICACION"
            )
            ;;
        "solo-gitops")
            fases_a_ejecutar=(
                "$FASE_VALIDACION"
                "$FASE_GITOPS"
                "$FASE_VERIFICACION"
            )
            ;;
        "solo-componentes")
            fases_a_ejecutar=(
                "$FASE_VALIDACION"
                "$FASE_COMPONENTES"
                "$FASE_VERIFICACION"
            )
            ;;
        "normal"|*)
            fases_a_ejecutar=(
                "$FASE_VALIDACION"
                "$FASE_CLUSTER"
                "$FASE_GITOPS"
                "$FASE_COMPONENTES"
                "$FASE_VERIFICACION"
            )
            ;;
    esac
    
    log_info "Modo de instalaci√≥n: $modo"
    log_info "Fases a ejecutar: ${fases_a_ejecutar[*]}"
    
    # Ejecutar fases secuencialmente
    local fases_completadas=()
    local fase_actual=""
    
    for fase in "${fases_a_ejecutar[@]}"; do
        fase_actual="$fase"
        log_running "Iniciando fase: $fase"
        
        case "$fase" in
            "$FASE_VALIDACION")
                if ! ejecutar_fase_validacion; then
                    limpiar_en_error "$fase"
                    log_error "Fase fall√≥: $fase"
                    mostrar_resumen_estado "${fases_completadas[@]}" "$fase" "${fases_a_ejecutar[@]}"
                    return 1
                fi
                ;;
            "$FASE_DEPENDENCIAS")
                if ! ejecutar_fase_dependencias; then
                    limpiar_en_error "$fase"
                    log_error "Fase fall√≥: $fase"
                    mostrar_resumen_estado "${fases_completadas[@]}" "$fase" "${fases_a_ejecutar[@]}"
                    return 1
                fi
                ;;
            "$FASE_CLUSTER")
                if ! ejecutar_fase_cluster; then
                    limpiar_en_error "$fase"
                    log_error "Fase fall√≥: $fase"
                    log_error "Fall√≥ la configuraci√≥n del cluster"
                    mostrar_resumen_estado "${fases_completadas[@]}" "$fase" "${fases_a_ejecutar[@]}"
                    return 1
                fi
                ;;
            "$FASE_GITOPS")
                if ! ejecutar_fase_gitops; then
                    limpiar_en_error "$fase"
                    log_error "Fase fall√≥: $fase"
                    mostrar_resumen_estado "${fases_completadas[@]}" "$fase" "${fases_a_ejecutar[@]}"
                    return 1
                fi
                ;;
            "$FASE_COMPONENTES")
                if ! ejecutar_fase_componentes; then
                    limpiar_en_error "$fase"
                    log_error "Fase fall√≥: $fase"
                    mostrar_resumen_estado "${fases_completadas[@]}" "$fase" "${fases_a_ejecutar[@]}"
                    return 1
                fi
                ;;
            "$FASE_VERIFICACION")
                if ! ejecutar_fase_verificacion; then
                    log_error "Fase fall√≥: $fase"
                    mostrar_resumen_estado "${fases_completadas[@]}" "$fase" "${fases_a_ejecutar[@]}"
                    return 1
                fi
                ;;
        esac
        
        fases_completadas+=("$fase")
    done
    
    # Mostrar resumen final
    mostrar_resumen_exito "${fases_completadas[@]}"
    return 0
}

# ============================================================================
# FUNCIONES DE REPORTE
# ============================================================================

mostrar_resumen_estado() {
    local fases_completadas=("$@")
    local fase_fallida=""
    local todas_las_fases=()
    
    # Extraer argumentos
    local i=0
    while [[ $i -lt $# ]]; do
        if [[ "${!i}" == "$FASE_VALIDACION" || "${!i}" == "$FASE_DEPENDENCIAS" || 
              "${!i}" == "$FASE_CLUSTER" || "${!i}" == "$FASE_GITOPS" || 
              "${!i}" == "$FASE_COMPONENTES" || "${!i}" == "$FASE_VERIFICACION" ]]; then
            if [[ -z "$fase_fallida" ]]; then
                fase_fallida="${!i}"
                ((i++))
                break
            fi
        fi
        ((i++))
    done
    
    # El resto son todas las fases
    while [[ $i -lt $# ]]; do
        todas_las_fases+=("${!i}")
        ((i++))
    done
    
    log_section "üìä Resumen de Estado de Instalaci√≥n"
    
    for fase in "${todas_las_fases[@]}"; do
        if [[ " ${fases_completadas[*]} " =~ " ${fase} " ]]; then
            echo "  ‚úì $fase     : (s)"
        elif [[ "$fase" == "$fase_fallida" ]]; then
            echo "  ‚úó $fase     : (s)"
        else
            echo "  ‚è≥ $fase     : pendiente"
        fi
    done
}

mostrar_resumen_exito() {
    local fases_completadas=("$@")
    
    log_section "üéâ Instalaci√≥n Completada Exitosamente"
    
    log_success "‚úÖ Todas las fases ejecutadas correctamente:"
    for fase in "${fases_completadas[@]}"; do
        echo "  ‚úì $fase"
    done
    
    echo
    log_info "üåê Acceso al cluster:"
    log_info "  kubectl config current-context"
    log_info "  kubectl get nodes"
    
    if [[ "$CLUSTER_PROVIDER" == "minikube" ]]; then
        log_info "üéõÔ∏è Dashboard de Kubernetes:"
        log_info "  minikube dashboard -p $CLUSTER_NAME"
    fi
}

# ============================================================================
# FUNCI√ìN PRINCIPAL EXPORTADA
# ============================================================================

run_orchestrator() {
    local modo="${1:-normal}"
    
    log_debug "Pre-cargando m√≥dulos comunes..."
    log_debug "M√≥dulo pre-cargado: cluster"
    log_debug "Pre-carga de m√≥dulos completada"
    
    if ! ejecutar_orquestacion "$modo"; then
        log_error "Error en la orquestaci√≥n GitOps"
        return 1
    fi
    
    return 0
}

# ============================================================================
# INICIALIZACI√ìN
# ============================================================================

inicializar_orquestador() {
    log_debug "Orquestador principal cargado - Sistema de fases disponible"
}

# Auto-inicializaci√≥n si se ejecuta directamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    inicializar_orquestador
    
    # Parsear argumentos de l√≠nea de comandos
    while [[ $# -gt 0 ]]; do
        case $1 in
            --mode=*)
                MODO_INSTALACION="${1#*=}"
                shift
                ;;
            --cluster=*)
                CLUSTER_NAME="${1#*=}"
                shift
                ;;
            --provider=*)
                CLUSTER_PROVIDER="${1#*=}"
                shift
                ;;
            --create-cluster=*)
                CREATE_CLUSTER="${1#*=}"
                shift
                ;;
            --dry-run=*)
                DRY_RUN="${1#*=}"
                shift
                ;;
            --verbose=*)
                VERBOSE="${1#*=}"
                shift
                ;;
            --debug=*)
                DEBUG="${1#*=}"
                shift
                ;;
            --interactive=*)
                INTERACTIVE="${1#*=}"
                shift
                ;;
            --log-level=*)
                LOG_LEVEL="${1#*=}"
                shift
                ;;
            *)
                MODO_INSTALACION="$1"
                shift
                ;;
        esac
    done
    
    run_orchestrator "$MODO_INSTALACION"
fi
